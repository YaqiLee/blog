<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在ubantu安装MariaDB</title>
    <url>/blog/2020/10/20/%E5%AE%89%E8%A3%85maridb/</url>
    <content><![CDATA[<h3 id="安装-MariaDB"><a href="#安装-MariaDB" class="headerlink" title="安装 MariaDB"></a>安装 MariaDB</h3><p>通过软件源仓库安装 MariaDB，运行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install mariadb-server</span><br></pre></td></tr></table></figure>

<p>安装完成之后程序会自动启动，想要验证是否运行，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl status mariadb</span><br></pre></td></tr></table></figure>

<h3 id="MariaDB-安全设置"><a href="#MariaDB-安全设置" class="headerlink" title="MariaDB 安全设置"></a>MariaDB 安全设置</h3><p>安装 mysql_secure_installation 脚本，以此来设置密码等安全操作，来提高数据库的安全性</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install mariadb-server mysql_secure_installation</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>MariaDB</tag>
        <tag>Ubantu</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo快速建自己的博客</title>
    <url>/blog/2020/10/20/%E4%BD%BF%E7%94%A8hexo%E5%BF%AB%E9%80%9F%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架</p>
<h3 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h3><p>使用 npm 全局安装 hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><p>安装完成 hexo 后，执行以下命令新建项目并安装依赖库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>所有步骤执行完毕之后，执行命令 hexo s 在本地运行查看效果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<h3 id="部署到-github"><a href="#部署到-github" class="headerlink" title="部署到 github"></a>部署到 github</h3><p>看完效果觉得还不错，想部署到 github 上让所有人看到？来试试修改_config.yml 文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;博客仓库地址&gt;</span> <span class="comment">#https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></span><br><span class="line">  <span class="attr">branch:</span> [<span class="string">分支</span>]</span><br><span class="line">  <span class="attr">message:</span> [<span class="string">自定义提交信息</span>]</span><br></pre></td></tr></table></figure>

<h3 id="安装部署插件"><a href="#安装部署插件" class="headerlink" title="安装部署插件"></a>安装部署插件</h3><p>等等，配置文件修改完了，就直接部署到 github 上了吗？|— – |</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line"><span class="comment"># 清理缓存</span></span><br><span class="line">$ hexo clean &amp;&amp; hexo deploy</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="部署到-github-没有样式"><a href="#部署到-github-没有样式" class="headerlink" title="部署到 github 没有样式"></a>部署到 github 没有样式</h3><p>部署到 github 上发现没有样式，发现资源文件路径不对，于是修改以下配置，重新发布</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://yaqilee.github.io/resposity</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/resposity/</span></span><br></pre></td></tr></table></figure>

<p>清理缓存，重新生成, 如果删除文件报错，多试几次</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>执行下列任一命令，也可以自动部署网站</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate --deploy</span><br><span class="line">$ hexo deploy --generate</span><br></pre></td></tr></table></figure>

<h3 id="启用站内搜索"><a href="#启用站内搜索" class="headerlink" title="启用站内搜索"></a>启用站内搜索</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>_config.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 启用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加配置</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建页面</span></span><br><span class="line">$ hexo new page [新页面名称]</span><br><span class="line"><span class="comment"># 新建帖子</span></span><br><span class="line">$ hexo new [博客标题]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>最近做ionic有一些想法</title>
    <url>/blog/2020/10/21/%E6%9C%80%E8%BF%91%E5%81%9Aionic%E6%9C%89%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/</url>
    <content><![CDATA[<p>静态资源有两种访问形式</p>
<ol>
<li>根据服务器根目录加载，适用于 history 模式使用，如：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- http://localhost:4000/project/add --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- http://localhost:4000/project/update --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/4.01604861.chunk.js&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>根据项目当前访问路径相对位置加载,适用使用 useHash 模式时的情况</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- http://localhost:4000/#/project/update --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./static/js/4.01604861.chunk.js&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>记录一时的想法，如过描述有误，请联系我</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>ionic</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx操作总结</title>
    <url>/blog/2020/10/23/nginx%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><b>1.nginx 部署 web 项目刷新 404</b><br>这种情况一般在项目使用 history 模式时发生，我们需要对 nginx.conf 做以下修改</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="attr">listen</span> <span class="string">4400;</span></span><br><span class="line">    <span class="attr">location</span> <span class="string">/api/ &#123;</span></span><br><span class="line">    <span class="attr">proxy_pass</span> <span class="string">http://localhost:8080/;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">    <span class="attr">root</span> <span class="string">/home/web/handy;</span></span><br><span class="line"><span class="comment">    # 添加</span></span><br><span class="line">    <span class="attr">try_files</span> <span class="string">$uri $uri/ /index.html;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>try_files：当访问 <a href="http://localhost/example/">http://localhost/example/</a>, $uri 就是/example，nginx 会尝试此路径，找到内容后返回给客户端</p>
<p><b>2.ubantu中nginx相关操作</b></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 平滑重启</span></span><br><span class="line">$ nginx -s reload</span><br><span class="line"><span class="comment"># 强制重启</span></span><br><span class="line">$ systemctl restart nginx</span><br><span class="line"><span class="comment"># 停止nginx</span></span><br><span class="line">$ nginx -s stop</span><br><span class="line"><span class="comment"># 平滑停止</span></span><br><span class="line">$ nginx -s quit</span><br><span class="line"><span class="comment"># 启动nginx服务</span></span><br><span class="line">$ systemctl start nginx</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode算法总结</title>
    <url>/blog/2020/10/26/leetcode%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>总结 leetcode 上对应题目的优秀算法，用来学习交流进步</p>
<h3 id="只出现一次的数字"><a href="#只出现一次的数字" class="headerlink" title="只出现一次的数字"></a>只出现一次的数字</h3><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ans = nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    ans = ans ^ nums[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>异或运算法则</p>
<blockquote>
<ol>
<li>归零律：a ⊕ a = 0</li>
<li>恒等律：a ⊕ 0 = a</li>
<li>交换律：a ⊕ b = b ⊕ a</li>
<li>结合律：a ⊕b ⊕ c = a ⊕ (b ⊕ c) = (a ⊕ b) ⊕ c;</li>
<li>自反：a ⊕ b ⊕ a = b.</li>
<li>d = a ⊕ b ⊕ c 可以推出 a = d ⊕ b ⊕ c</li>
</ol>
</blockquote>
<h3 id="加一"><a href="#加一" class="headerlink" title="加一"></a>加一</h3><p>给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。你可以假设除了整数 0 之外，这个整数不会以零开头。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> plusOne = <span class="function"><span class="keyword">function</span> (<span class="params">digits</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = digits.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    digits[i]++;</span><br><span class="line">    digits[i] = digits[i] % <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 除了99...之外的情况，其他都可以自动加1返回</span></span><br><span class="line">    <span class="keyword">if</span> (digits[i] != <span class="number">0</span>) <span class="keyword">return</span> digits;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  digits = <span class="keyword">new</span> <span class="built_in">Array</span>(digits.length + <span class="number">1</span>).fill(<span class="number">0</span>);</span><br><span class="line">  digits[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> digits;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="移动-0"><a href="#移动-0" class="headerlink" title="移动 0"></a>移动 0</h3><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> moveZeroes = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 记录当前不为0的索引</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 如果不等于0，放入nums[current], current加1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[i] !== <span class="number">0</span>) &#123;</span><br><span class="line">      nums[current++] = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 数组剩余部分填充0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = current; i &lt; nums.length; i++) &#123;</span><br><span class="line">    nums[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> nums;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="删除排序数组中的重复项"><a href="#删除排序数组中的重复项" class="headerlink" title="删除排序数组中的重复项"></a>删除排序数组中的重复项</h3><p>给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 双指针法</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[j] != nums[i]) &#123;</span><br><span class="line">      i++;</span><br><span class="line">      nums[i] = nums[j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="旋转数组"><a href="#旋转数组" class="headerlink" title="旋转数组"></a>旋转数组</h3><p>给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 旋转数组，三次翻转</span></span><br><span class="line"><span class="keyword">var</span> rotate = <span class="function"><span class="keyword">function</span> (<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">  k %= nums.length;</span><br><span class="line">  <span class="comment">// 1. 整体反转</span></span><br><span class="line">  reverse(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 2. 反转前K个</span></span><br><span class="line">  reverse(nums, <span class="number">0</span>, k - <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 3. 反转后 n-k 个数字</span></span><br><span class="line">  reverse(nums, k, nums.length - <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">nums, start, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = nums[start];</span><br><span class="line">    nums[start] = nums[end];</span><br><span class="line">    nums[end] = temp;</span><br><span class="line">    start++;</span><br><span class="line">    end--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span> (<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = nums.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="comment">// 符合条件取出当前值，返回</span></span><br><span class="line">    <span class="keyword">if</span> (map.has(target - nums[i])) &#123;</span><br><span class="line">      <span class="keyword">return</span> [map.get(target - nums[i]), i];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 不匹配的值存入map中，[key,value] = [数组值，索引]</span></span><br><span class="line">      map.set(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="旋转数组-1"><a href="#旋转数组-1" class="headerlink" title="旋转数组"></a>旋转数组</h3><p>给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rotate = <span class="function"><span class="keyword">function</span> (<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 灵魂</span></span><br><span class="line">  k %= nums.length;</span><br><span class="line">  <span class="comment">// 整体翻转</span></span><br><span class="line">  reverse(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 翻转前K个数</span></span><br><span class="line">  reverse(nums, <span class="number">0</span>, k - <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 翻转后K个</span></span><br><span class="line">  reverse(nums, k, nums.length - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> nums;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span> (<span class="params">nums, fromIndex, endIndex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (fromIndex &lt; endIndex) &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = nums[endIndex];</span><br><span class="line">    nums[endIndex] = nums[fromIndex];</span><br><span class="line">    nums[fromIndex] = temp;</span><br><span class="line">    fromIndex++;</span><br><span class="line">    endIndex--;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> nums;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="存在重复元素"><a href="#存在重复元素" class="headerlink" title="存在重复元素"></a>存在重复元素</h3><p>给定一个整数数组，判断是否存在重复元素。如果任意一值在数组中出现至少两次，函数返回 true 。如果数组中每个元素都不相同，则返回 false 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> containsDuplicate = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = nums.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (map.has(nums[i])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      map.set(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="旋转图像"><a href="#旋转图像" class="headerlink" title="旋转图像"></a>旋转图像</h3><p>给定一个 n × n 的二维矩阵表示一个图像。将图像顺时针旋转 90 度。[原地旋转]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rotate = <span class="function"><span class="keyword">function</span> (<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = matrix.length;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 旋转</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; n; j++) &#123;</span><br><span class="line">      <span class="keyword">let</span> tmp = matrix[j][i];</span><br><span class="line">      matrix[j][i] = matrix[i][j];</span><br><span class="line">      matrix[i][j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 反转</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n / <span class="number">2</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">let</span> tmp = matrix[i][j];</span><br><span class="line">      matrix[i][j] = matrix[i][n - j - <span class="number">1</span>];</span><br><span class="line">      matrix[i][n - j - <span class="number">1</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> matrix;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h3><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 双指针法</span></span><br><span class="line"><span class="keyword">var</span> reverseString = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> length = s.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> left = <span class="number">0</span>, right = length - <span class="number">1</span>; left &lt; right; left++, right--) &#123;</span><br><span class="line">    [s[left], s[right]] = [s[right], s[left]];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h3><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> rev = <span class="number">0</span>,</span><br><span class="line">    INT_MIN = (-<span class="number">1</span> * <span class="number">2</span>) ** <span class="number">31</span>,</span><br><span class="line">    INT_MAX = <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最后一位除10取整等于0</span></span><br><span class="line">  <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 每次模10得出最后一位数字</span></span><br><span class="line">    <span class="keyword">let</span> pop = x % <span class="number">10</span>;</span><br><span class="line">    x = <span class="built_in">Math</span>.trunc(x / <span class="number">10</span>);</span><br><span class="line">    <span class="comment">// 更具rev = rev * 10 + pop得出溢出条件</span></span><br><span class="line">    <span class="keyword">if</span> (rev &gt; INT_MAX / <span class="number">10</span> || (rev == INT_MAX / <span class="number">10</span> &amp;&amp; pop &gt; <span class="number">7</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (rev &lt; INT_MIN / <span class="number">10</span> || (rev == INT_MIN / <span class="number">10</span> &amp;&amp; pop &lt; -<span class="number">8</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 追加到末尾</span></span><br><span class="line">    rev = rev * <span class="number">10</span> + pop;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rev;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="独一无二的出现次数"><a href="#独一无二的出现次数" class="headerlink" title="独一无二的出现次数"></a>独一无二的出现次数</h3><p>给你一个整数数组 arr，请你帮忙统计数组中每个数的出现次数。如果每个数的出现次数都是独一无二的，就返回 true；否则返回 false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> uniqueOccurrences = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> occur = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (occur.has(x)) &#123;</span><br><span class="line">      occur.set(x, occur.get(x) + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      occur.set(x, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> times = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> [, value] <span class="keyword">of</span> occur) &#123;</span><br><span class="line">    times.add(value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> times.size === occur.size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="两个数组的交集"><a href="#两个数组的交集" class="headerlink" title="两个数组的交集"></a>两个数组的交集</h3><p>给定两个数组，编写一个函数来计算它们的交集</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> intersection = <span class="function"><span class="keyword">function</span> (<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  <span class="keyword">let</span> nums1Set = <span class="keyword">new</span> <span class="built_in">Set</span>(nums1);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len2 = nums2.length; i &lt; len2; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums1Set.has(nums2[i])) &#123;</span><br><span class="line">      result.add(nums2[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(result);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="有效的字母异位词"><a href="#有效的字母异位词" class="headerlink" title="有效的字母异位词"></a>有效的字母异位词</h3><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;rat&quot;, t = &quot;car&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">t</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isAnagram = <span class="function"><span class="keyword">function</span> (<span class="params">s, t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="built_in">Array</span>(<span class="number">26</span>).fill(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (s.length != t.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">    count[s[i].codePointAt() - <span class="number">97</span>]++;</span><br><span class="line">    count[t[i].codePointAt() - <span class="number">97</span>]--;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> c <span class="keyword">of</span> count) &#123;</span><br><span class="line">    <span class="keyword">if</span> (c != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h3><p>给定一个 没有重复 数字的序列，返回其所有可能的全排列</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入: [1,2,3]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">[1,2,3],</span><br><span class="line">[1,3,2],</span><br><span class="line">[2,1,3],</span><br><span class="line">[2,3,1],</span><br><span class="line">[3,1,2],</span><br><span class="line">[3,2,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> permute = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = [],</span><br><span class="line">    used = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> generatePermute(result, nums, [], used);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">result</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> </span>current 当前正在用的排列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;boolean[]&#125;</span> </span>used 当前数字是否已使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> generatePermute = <span class="function"><span class="keyword">function</span> (<span class="params">result, nums, current, used</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (current.length === nums.length) &#123;</span><br><span class="line">    result.push(current.slice(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 如果没有使用</span></span><br><span class="line">    <span class="keyword">if</span> (!used[i]) &#123;</span><br><span class="line">      current.push(nums[i]);</span><br><span class="line">      used[i] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      generatePermute(result, nums, current, used);</span><br><span class="line">      <span class="comment">// 一次调用执行完毕，回溯</span></span><br><span class="line">      used[i] = <span class="literal">false</span>;</span><br><span class="line">      current.pop();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">permute([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="字母异位词分组"><a href="#字母异位词分组" class="headerlink" title="字母异位词分组"></a>字母异位词分组</h3><p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string[]&#125;</span> <span class="variable">strs</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> groupAnagrams = <span class="function"><span class="keyword">function</span> (<span class="params">strs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> strs) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = str.split(<span class="string">&quot;&quot;</span>).sort().join(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (map.has(s)) &#123;</span><br><span class="line">      map.set(s, [...map.get(s), str]);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    map.set(s, [str]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [...map.values()];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">groupAnagrams([<span class="string">&quot;eat&quot;</span>, <span class="string">&quot;tea&quot;</span>, <span class="string">&quot;tan&quot;</span>, <span class="string">&quot;ate&quot;</span>, <span class="string">&quot;nat&quot;</span>, <span class="string">&quot;bat&quot;</span>]);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>html总结</title>
    <url>/blog/2020/10/29/html%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="html-语义化"><a href="#html-语义化" class="headerlink" title="html 语义化"></a>html 语义化</h3><ol>
<li>代码结构清晰</li>
<li>有利于搜索引擎优化 SEO</li>
</ol>
<h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><p>Block format context 块级格式化上下文, 一块独立渲染区域，内部元素的渲染不会影响边界以外的元素</p>
<blockquote>
<p><b>如何生成 BFC</b></p>
</blockquote>
<ol>
<li>float 不是 none</li>
<li>display 是 inline-block、table-cell、flex、table-caption 或者 inline-flex</li>
<li>position 是 absolute 或 fixed</li>
<li>overflow 不是 visible</li>
</ol>
<blockquote>
<p><b>BFC 特性</b></p>
</blockquote>
<ol>
<li>使内部浮动不会越出边界</li>
<li>相邻浮动元素产生边界</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>BFC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>使内部浮动不会越出边界<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #000;overflow: hidden;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;width: 100px; height: 100px; background: #eee; float: left&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>相邻浮动元素产生边界<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;height: 100px; width: 100px; float: left; background: lightblue&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        我是一个左浮动的元素</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;width: 200px; height: 200px; background: #eee; overflow: hidden;&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        我是一个没有设置浮动, 也没有触发 BFC 元素, width: 200px; height:200px;</span><br><span class="line">        background: #eee;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="margin-负值"><a href="#margin-负值" class="headerlink" title="margin 负值"></a>margin 负值</h3><ul>
<li>margin-top，margin-left 负值，元素向上，向左移动</li>
<li>margin-right 负值，右侧元素左移，自身不受影响</li>
<li>margin-bottom 负值，下方元素上移，自身不受影响</li>
</ul>
<h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>圣杯布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.row</span> &#123;</span></span><br><span class="line">        position: relative;</span><br><span class="line">        float: left;</span><br><span class="line">        text-align: center;</span><br><span class="line">        height: 300px;</span><br><span class="line">        line-height: 300px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.container</span> <span class="selector-class">.header</span>,</span></span><br><span class="line"><span class="css">      <span class="selector-class">.container</span> <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(29, 27, 27, 0<span class="selector-class">.726</span>);</span></span><br><span class="line">        text-align: center;</span><br><span class="line">        height: 60px;</span><br><span class="line">        line-height: 60px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.container</span> <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">        padding-left: 150px;</span><br><span class="line">        padding-right: 200px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.content</span> <span class="selector-class">.center</span> &#123;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.content</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">        width: 150px;</span><br><span class="line">        right: 150px;</span><br><span class="line">        margin-left: -100%;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#cccccc</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.content</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        margin-right: -200px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#cccccc</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">        content: &quot;&quot;;</span><br><span class="line">        clear: both;</span><br><span class="line">        display: table;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center row&quot;</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left row&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right row&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS参考</title>
    <url>/blog/2020/11/03/CSS%E5%8F%82%E8%80%83/</url>
    <content><![CDATA[<h3 id="CSS-var-函数"><a href="#CSS-var-函数" class="headerlink" title="CSS var() 函数"></a>CSS var() 函数</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义一个名为 &quot;--main-bg-color&quot; 的属性，然后使用 var() 函数调用该属性： */</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">--main-bg-color</span>: coral;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#div1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--main-bg-color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#div2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--main-bg-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CSS-linear-gradient-函数"><a href="#CSS-linear-gradient-函数" class="headerlink" title="CSS linear-gradient() 函数"></a>CSS linear-gradient() 函数</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 从头部开始的线性渐变，从红色开始，转为黄色，再到蓝色： */</span></span><br><span class="line"><span class="selector-id">#grad</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(red, yellow, blue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 从上到下，蓝色渐变到红色 */</span></span><br><span class="line"><span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-tag">blue</span>, <span class="selector-tag">red</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 渐变轴为45度，从蓝色渐变到红色 */</span></span><br><span class="line"><span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-tag">blue</span>, <span class="selector-tag">red</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 从右下到左上、从蓝色渐变到红色 */</span></span><br><span class="line"><span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">left</span> <span class="selector-tag">top</span>, <span class="selector-tag">blue</span>, <span class="selector-tag">red</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 从下到上，从蓝色开始渐变、到高度40%位置是绿色渐变开始、最后以红色结束 */</span></span><br><span class="line"><span class="selector-tag">linear-gradient</span>(0<span class="selector-tag">deg</span>, <span class="selector-tag">blue</span>, <span class="selector-tag">green</span> 40%, <span class="selector-tag">red</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>:defined</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 选择所有已定义的元素 */</span></span><br><span class="line"><span class="selector-pseudo">:defined</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选择指定自定义元素的任何实例 */</span></span><br><span class="line"><span class="selector-tag">simple-custom</span><span class="selector-pseudo">:defined</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>babel相关问题</title>
    <url>/blog/2020/11/06/babel%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="编译时遇到一些问题"><a href="#编译时遇到一些问题" class="headerlink" title="编译时遇到一些问题"></a>编译时遇到一些问题</h3><p>使用以下命令 编译装饰器测试 demo，遇到问题</p>
<p>命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx babel .\decorators.js --out-dir ./dist/decorators</span><br></pre></td></tr></table></figure>

<p>问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Support <span class="keyword">for</span> the experimental syntax <span class="string">&#x27;decorators-legacy&#x27;</span> isn<span class="string">&#x27;t currently enabled</span></span><br></pre></td></tr></table></figure>

<p>解决方法</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span>: [</span><br><span class="line">    ++ [<span class="string">&quot;@babel/plugin-proposal-decorators&quot;</span>, &#123; <span class="attr">&quot;legacy&quot;</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">    ++ [<span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span>, &#123; <span class="attr">&quot;loose&quot;</span> : <span class="literal">true</span> &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果想支持装饰器还需要创建 jsconfig.json 或 tsconfig.json 配置文件，并添加一下配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>q&amp;a</category>
      </categories>
      <tags>
        <tag>babel</tag>
      </tags>
  </entry>
  <entry>
    <title>js装饰器-decorators</title>
    <url>/blog/2020/11/06/js%E8%A3%85%E9%A5%B0%E5%99%A8-decorators/</url>
    <content><![CDATA[<h3 id="安装-babel-转译支持"><a href="#安装-babel-转译支持" class="headerlink" title="安装 babel 转译支持"></a>安装 babel 转译支持</h3><ol>
<li>安装 babel 编译器</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @babel&#x2F;cli</span><br><span class="line">npm install --save-dev @babel&#x2F;core</span><br><span class="line">npm install --save-dev @babel&#x2F;plugin-proposal-class-properties</span><br><span class="line">npm install --save-dev @babel&#x2F;preset-env</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>添加配置文件[.babelrc]</li>
</ol>
<blockquote>
<p>注意配置中插件的位置</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span>: [</span><br><span class="line">    [<span class="string">&quot;@babel/plugin-proposal-decorators&quot;</span>, &#123; <span class="attr">&quot;legacy&quot;</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">    [<span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span>, &#123; <span class="attr">&quot;loose&quot;</span>: <span class="literal">true</span> &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>手动编译方法</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx babel [测试文件相对路径] --out-dir [输出位置]</span><br></pre></td></tr></table></figure>

<h3 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h3><p>对类进行操作，target 参数是类本身</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> itemFy = <span class="function">(<span class="params">target</span>) =&gt;</span> &#123;</span><br><span class="line">  target.prototype.click = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@itemFy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;div&gt;&lt;/div&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> comp = <span class="keyword">new</span> MyComponent();</span><br><span class="line"></span><br><span class="line">comp.click(); <span class="comment">// log: click</span></span><br></pre></td></tr></table></figure>

<h3 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> itemPropFy = <span class="function">(<span class="params">targetPrototype, propName</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> originRender = targetPrototype.render;</span><br><span class="line">  targetPrototype.render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;div class=&quot;outer&quot;&gt;<span class="subst">$&#123;originRender.call(<span class="built_in">this</span>)&#125;</span>&lt;/div&gt;`</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 注意返回值</span></span><br><span class="line">  <span class="keyword">return</span> targetPrototype;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> </span>&#123;</span><br><span class="line">  @itemPropFy</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;div&gt;内容&lt;/div&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> comp = <span class="keyword">new</span> MyComponent();</span><br><span class="line"><span class="built_in">console</span>.log(comp.render()); <span class="comment">// &lt;div class=&quot;outer&quot;&gt;&lt;div&gt;内容&lt;/div&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>

<p>带参装饰器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> updateText = <span class="function">(<span class="params">content</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">targetPrototype, propName</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (targetPrototype[propName] = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> content;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> </span>&#123;</span><br><span class="line">  @updateText(<span class="string">&quot;我是render&quot;</span>)</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @updateText(<span class="string">&quot;我是renderTwo&quot;</span>)</span><br><span class="line">  <span class="function"><span class="title">renderTwo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> comp = <span class="keyword">new</span> MyComponent();</span><br><span class="line"><span class="built_in">console</span>.log(comp.render());</span><br><span class="line"><span class="built_in">console</span>.log(comp.renderTwo());</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>babel</category>
      </categories>
      <tags>
        <tag>decorators</tag>
        <tag>babel</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs基础</title>
    <url>/blog/2020/11/07/nodejs%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="nodejs-调试"><a href="#nodejs-调试" class="headerlink" title="nodejs 调试"></a>nodejs 调试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node --inspect-brk .\test.js</span><br></pre></td></tr></table></figure>

<h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><p>path 模块常用语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resolvePath = path.resolve(__dirname, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> joinPath = path.join(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目根目录</span></span><br><span class="line"><span class="comment">// E:\文档\Projects</span></span><br><span class="line"><span class="built_in">console</span>.log(path.resolve());</span><br><span class="line"><span class="comment">// E:\文档\Projects\demo\a\b</span></span><br><span class="line"><span class="built_in">console</span>.log(resolvePath);</span><br><span class="line"><span class="comment">// 当前工作目录</span></span><br><span class="line"><span class="built_in">console</span>.log(process.cwd());</span><br><span class="line"><span class="comment">// a\b</span></span><br><span class="line"><span class="built_in">console</span>.log(joinPath);</span><br><span class="line"><span class="comment">// 当前文件所在的目录</span></span><br><span class="line"><span class="comment">// E:\文档\Projects\demo\path.js</span></span><br><span class="line"><span class="built_in">console</span>.log(__filename);</span><br><span class="line"></span><br><span class="line"><span class="comment">// E:\文档\Projects\demo</span></span><br><span class="line"><span class="built_in">console</span>.log(__dirname);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后缀 .js</span></span><br><span class="line"><span class="built_in">console</span>.log(path.extname(__filename));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件名 path.js</span></span><br><span class="line"><span class="built_in">console</span>.log(path.basename(__filename));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件路径 E:\文档\Projects\demo</span></span><br><span class="line"><span class="built_in">console</span>.log(path.dirname(__filename));</span><br></pre></td></tr></table></figure>

<h3 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h3><ol start="2">
<li>promise 封装读取文件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pathToFile = path.resolve(__dirname, <span class="string">&quot;./file.txt&quot;</span>);</span><br><span class="line"><span class="comment">// 将方法func 封装成promise</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promisify</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      args.push(<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) reject(err);</span><br><span class="line">        <span class="keyword">return</span> resolve(result);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> func.apply(func, args);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">promisify(fs.readFile)(pathToFile, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">content</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(content);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="require-功能实现"><a href="#require-功能实现" class="headerlink" title="require 功能实现"></a>require 功能实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录一下，以便日后深入学习</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> pathToFile = path.resolve(__dirname, filename);</span><br><span class="line">  <span class="keyword">const</span> content = fs.readFileSync(pathToFile, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> wrapper = [<span class="string">&quot;(function(require, module, exports)&#123;&quot;</span>, <span class="string">&quot;&#125;)&quot;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> wrappedConent = wrapper[<span class="number">0</span>] + content + wrapper[<span class="number">1</span>];</span><br><span class="line">  <span class="comment">// 使字符串转换为可执行js脚本</span></span><br><span class="line">  <span class="keyword">const</span> script = <span class="keyword">new</span> vm.Script(wrappedConent, &#123;</span><br><span class="line">    filename: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">    <span class="keyword">export</span>: &#123;&#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = script.runInThisContext();</span><br><span class="line">  <span class="comment">// 等于wrapper内的匿名函数</span></span><br><span class="line">  result(r, <span class="built_in">module</span>, <span class="built_in">module</span>.exports);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">global</span>.r = r;</span><br></pre></td></tr></table></figure>

<p>使用时只需要这样用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;./require&quot;</span>);</span><br><span class="line"></span><br><span class="line">r(<span class="string">&quot;./test.js&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h3><p>为什么 module.exports 不能用 exports 直接赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  key: &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.key = <span class="string">&quot;我可以改变值&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.key); <span class="comment">// 我可以改变值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let key = obj.key;</span></span><br><span class="line"><span class="comment">// key = &quot;没有改变&quot;;</span></span><br><span class="line"><span class="comment">// console.log(obj.key); // &#123;&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>es6</title>
    <url>/blog/2020/11/06/es6/</url>
    <content><![CDATA[<blockquote>
<p>工具库尽量命名方式导出，不要使用对象导出。对象在编译的时候不能被优化掉</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// utils.js right</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> request = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> debounce = <span class="function">(<span class="params">time</span>) =&gt;</span> &#123;&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// utils.js wrong</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> utils = &#123;</span><br><span class="line"></span><br><span class="line">  request:<span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  debounce:<span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/blog/2020/11/09/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] - arr[j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] - arr[j - <span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      swap(arr, j, j - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> middle = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>),</span><br><span class="line">    left = arr.slice(<span class="number">0</span>, middle),</span><br><span class="line">    right = arr.slice(middle);</span><br><span class="line">  <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">while</span> (left.length &gt; <span class="number">0</span> &amp;&amp; right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left[<span class="number">0</span>] &lt; right[<span class="number">0</span>]) &#123;</span><br><span class="line">      <span class="comment">/*shift()⽅法⽤于把数组的第⼀个元素从其中删除，并返回第⼀个元素的值。*/</span> result.push(</span><br><span class="line">        left.shift()</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.push(right.shift());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result.concat(left).concat(right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quicksort</span>(<span class="params">arr = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> pivot = <span class="built_in">Math</span>.floor(arr.length - <span class="number">1</span> / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">let</span> pivotVal = arr[pivot];</span><br><span class="line">  <span class="keyword">let</span> less = [],more = [];</span><br><span class="line"></span><br><span class="line">  arr.splice(pivot, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pivot; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; pivotVal) &#123;</span><br><span class="line">      less.push(arr[i]); <span class="comment">// 小于中间值，存less</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      more.push(arr[i]); <span class="comment">// 大于中间值，存less</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 每次将结果合并， 递归这里要简单点想，不要去想他的执行哪一步，返回的结果是什么</span></span><br><span class="line">  <span class="keyword">return</span> [...quicksort(less), pivotVal, ...quicksort(more)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/blog/2020/11/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h3 id="区间调度"><a href="#区间调度" class="headerlink" title="区间调度"></a>区间调度</h3><p>[贪心算法][1,2],[3,4],[6,10],[4,6]]，求最多有几个不相交的区间</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">intervalSchedule</span>(<span class="params">intvs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (intvs.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 根据右区间排序，[ [ 1, 4 ], [ 5, 7 ], [ 8, 10 ] ]</span></span><br><span class="line">  <span class="keyword">const</span> sortArray = intvs.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a[<span class="number">1</span>] - b[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">let</span> xEnd = sortArray[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (item <span class="keyword">of</span> intvs) &#123;</span><br><span class="line">    <span class="keyword">const</span> start = item[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (start &gt;= xEnd) &#123;</span><br><span class="line">      count++;</span><br><span class="line">      xEnd = item[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">intervalSchedule([</span><br><span class="line">  [<span class="number">1</span>, <span class="number">4</span>],</span><br><span class="line">  [<span class="number">8</span>, <span class="number">10</span>],</span><br><span class="line">  [<span class="number">5</span>, <span class="number">7</span>],</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<h3 id="两地调度"><a href="#两地调度" class="headerlink" title="两地调度"></a>两地调度</h3><p>[贪心算法]2N 个人，去 A, B 两座城市旅游，每座城市去 N 个人。第 i 个人去 A 座城市车费为 costs[i][0], B 座城市车费为 costs[i][1],问怎样分配花费最少</p>
<blockquote>
<p>假设都准备去 B，然后从 B 中抽出 N 个人去 A，怎么样最省钱？costs[i][0] - costs[i][1] 值越小越省。根据 B-A 排序</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> twoCitySchedCost = <span class="function"><span class="keyword">function</span> (<span class="params">costs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>,</span><br><span class="line">    n = costs.length / <span class="number">2</span>;</span><br><span class="line">  costs.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a[<span class="number">0</span>] - a[<span class="number">1</span>] - (b[<span class="number">0</span>] - b[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    sum += costs[i][<span class="number">0</span>] + costs[i + n][<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><p>1 1 2 3 5 8 … 斐波那契数列求第 n 个数是多少</p>
<ol>
<li>递归</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fib = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>动态规划</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fb</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> prev = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = prev + current;</span><br><span class="line">    prev = current;</span><br><span class="line">    current = sum;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> current;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="整数拆分"><a href="#整数拆分" class="headerlink" title="整数拆分"></a>整数拆分</h3><p>给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。你可以假设 n 不小于 2 且不大于 58</p>
<img src="/blog/.io//2020/11/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/dp-break-integer.png" class>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">解题思路： f(n) &#x3D; f(n-i) + i</span><br><span class="line"></span><br><span class="line">1. 假设 n &#x3D;&#x3D; 4， 则可以分割成 f(3) + 1，f(2) + 2，f(1) + 3, 所以得出方程 f(n) &#x3D; f(n-i) + i；</span><br><span class="line">   得出 i 时的最大乘积：Math.max(f(n-i) * i, max)</span><br><span class="line">2. 代码中 integerBreak(n - i)表示将每一个值都至少分割n - i次，还有一种情况是只分割一次，n 和 n - i, 所以加上 i * (n - i)</span><br></pre></td></tr></table></figure>

<ol>
<li>递归解法</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> integerBreak = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="comment">// f(n) = f(n-i) + i</span></span><br><span class="line">    res = <span class="built_in">Math</span>.max(res, i * (n - i), integerBreak(n - i) * i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>记忆化搜索 + 递归。自顶向下的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> integerBreak = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化长度为n+1的数组，默认值-1，因为用到了memo[n]</span></span><br><span class="line">  <span class="keyword">var</span> memo = <span class="built_in">Array</span>(n + <span class="number">1</span>).fill(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> breakInteger(n, memo);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> breakInteger = <span class="function"><span class="keyword">function</span> (<span class="params">n, memo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = -<span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 直接返回为n时已计算过的值</span></span><br><span class="line">  <span class="keyword">if</span> (memo[n] != -<span class="number">1</span>) <span class="keyword">return</span> memo[n];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="comment">// f(n) = f(n-i) + i</span></span><br><span class="line">    res = <span class="built_in">Math</span>.max(res, i * (n - i), breakInteger(n - i, memo) * i);</span><br><span class="line">  &#125;</span><br><span class="line">  memo[n] = res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>动态规划</li>
</ol>
<p>自底向上的问题，先解决最基本的问题</p>
<p>f(2) = f(1) + 1<br>f(3) = f(2) + 1 =&gt; f(1) + 2</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> integerBreak = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> memo = <span class="built_in">Array</span>(n + <span class="number">1</span>).fill(-<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// i为1时的最大乘积</span></span><br><span class="line">  memo[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="comment">// console.log(j, i - j);</span></span><br><span class="line">      memo[i] = <span class="built_in">Math</span>.max(memo[i], j * (i - j), j * memo[i - j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> memo[n];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 打印顺序(自底向上)，参考图片</span></span><br><span class="line"><span class="comment">// (+1, 1) (+1, 2) (+2, 1) (+1, 3) (+2, 2) (+3, 1)</span></span><br></pre></td></tr></table></figure>

<h3 id="0-1-背包问题"><a href="#0-1-背包问题" class="headerlink" title="0-1 背包问题"></a>0-1 背包问题</h3><p>有 n 个容量为 c0,c1,c2..cn 的物品，每个物品价值分别为 v0,v1,v2…vn 放到最大容量为 C 的背包里，怎么放使背包里物品的价值最大</p>
<img src="/blog/.io//2020/11/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01-1.png" class>

<p><b>题解</b><br>F(n, C) 将 n 个物品放进容量为 C 的背包。需要考虑两种情况</p>
<ol>
<li>不考虑第 i 个物品</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">F(i, c) = F(i - <span class="number">1</span>, c);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>考虑第 i 个物品</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// v[i]：第i个物品的价值</span></span><br><span class="line"><span class="comment">// c - w[i]：此时剩下背包的容量需要减去第 i 个物品已经占用的容量</span></span><br><span class="line">F(i, c) = v[i] + F(i - <span class="number">1</span>, c - w[i]);</span><br></pre></td></tr></table></figure>

<p>两种情况取最大值，则有转移方程</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">F(i, C) = max(F(i - <span class="number">1</span>, c), v(i) + F(i - <span class="number">1</span>, c - w(i)));</span><br></pre></td></tr></table></figure>

<img src="/blog/.io//2020/11/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01-2.png" class>

<p><b>实现</b></p>
<ol>
<li>递归实现</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> capacity = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> weights = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> values = [<span class="number">6</span>, <span class="number">10</span>, <span class="number">12</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bestValue</span>(<span class="params">w, v, i, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (i &lt; <span class="number">0</span> || c &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = bestValue(w, v, i - <span class="number">1</span>, c);</span><br><span class="line">  <span class="keyword">if</span> (c &gt;= w[i]) res = <span class="built_in">Math</span>.max(res, v[i] + bestValue(w, v, i - <span class="number">1</span>, c - w[i]));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bestValue(weights, values, values.length - <span class="number">1</span>, capacity);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>记忆化搜索</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// i 个物品</span></span><br><span class="line"><span class="keyword">var</span> memo = <span class="built_in">Array</span>(values.length).fill(<span class="built_in">Array</span>(capacity + <span class="number">1</span>).fill(-<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bestValue</span>(<span class="params">w, v, i, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (i &lt; <span class="number">0</span> || c &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (memo[i][c] != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> memo[i][c];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = bestValue(w, v, i - <span class="number">1</span>, c);</span><br><span class="line">  <span class="keyword">if</span> (c &gt;= w[i]) res = <span class="built_in">Math</span>.max(res, v[i] + bestValue(w, v, i - <span class="number">1</span>, c - w[i]));</span><br><span class="line"></span><br><span class="line">  memo[i][c] = res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bestValue(weights, values, values.length - <span class="number">1</span>, capacity);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>动态规划</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> capacity = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> weights = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> values = [<span class="number">6</span>, <span class="number">10</span>, <span class="number">12</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bestValue</span>(<span class="params">w, v, C</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n = v.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// i 个物品</span></span><br><span class="line">  <span class="keyword">var</span> memo = <span class="built_in">Array</span>.from(<span class="built_in">Array</span>(n), <span class="function">() =&gt;</span> <span class="built_in">Array</span>(C + <span class="number">1</span>).fill(-<span class="number">1</span>));</span><br><span class="line">  <span class="comment">// 自顶向下，初始化默认值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt;= C; j++) &#123;</span><br><span class="line">    memo[<span class="number">0</span>][j] = j &gt;= w[<span class="number">0</span>] ? v[<span class="number">0</span>] : <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 循环遍历n个商品</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt;= C; j++) &#123;</span><br><span class="line">      <span class="comment">// 第1种情况</span></span><br><span class="line">      memo[i][j] = memo[i - <span class="number">1</span>][j];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (j &gt;= w[i]) &#123;</span><br><span class="line">        <span class="comment">// 第二种情况，取最大值</span></span><br><span class="line">        memo[i][j] = <span class="built_in">Math</span>.max(memo[i][j], v[i] + memo[i - <span class="number">1</span>][j - w[i]]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> memo[n - <span class="number">1</span>][C];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><p>给定一个无序的整数数组，找到其中最长上升子序列的长度</p>
<p><b>解题思路</b></p>
<img src="/blog/.io//2020/11/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/lis.png" class>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lengthOfLIS = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nums.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 默认只有一个最长子序列，就是数值本身</span></span><br><span class="line">  <span class="keyword">let</span> memo = <span class="built_in">Array</span>(nums.length).fill(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="comment">// nums[i]以前，是否有小于nums[i]的值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class="line">        memo[i] = <span class="built_in">Math</span>.max(memo[i], <span class="number">1</span> + memo[j]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(...memo);</span><br><span class="line">&#125;;</span><br><span class="line">lengthOfLIS([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="打家劫舍"><a href="#打家劫舍" class="headerlink" title="打家劫舍"></a>打家劫舍</h3><p>求所有不相邻的整数的最大值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function">(<span class="params">nums</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1. 边界条件</span></span><br><span class="line">  <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (nums.length == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 初始化数组</span></span><br><span class="line">  <span class="keyword">let</span> dp = <span class="built_in">Array</span>(nums.length).fill(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">  dp[<span class="number">1</span>] = <span class="built_in">Math</span>.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">  <span class="comment">// 3： 循环</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 两种情况，选或者不选为i时的值。求两种情况的最大值</span></span><br><span class="line">    dp[i] = <span class="built_in">Math</span>.max(nums[i] + dp[i - <span class="number">2</span>], dp[i - <span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dp[nums.length - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ret = rob(arr);</span><br></pre></td></tr></table></figure>

<h3 id="零钱兑换"><a href="#零钱兑换" class="headerlink" title="零钱兑换"></a>零钱兑换</h3><p>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回  -1。</p>
<p>你可以认为每种硬币的数量是无限的。</p>
<ol>
<li>确定状态<br>dp[x] 总金额为 x 时，所需的最小硬币数<br>dp[x] = min(dp[x - coins[1]] + 1, dp[x])</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">amount</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">coins</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> change = <span class="function"><span class="keyword">function</span> (<span class="params">amount, coins</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dp = <span class="built_in">Array</span>(amount + <span class="number">1</span>).fill(<span class="built_in">Number</span>.MAX_VALUE);</span><br><span class="line">  dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> currentAmount = <span class="number">1</span>; currentAmount &lt;= amount; currentAmount++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> coin <span class="keyword">of</span> coins) &#123;</span><br><span class="line">      <span class="comment">// 减去coin后的剩余金额</span></span><br><span class="line">      <span class="keyword">let</span> leftAmount = currentAmount - coin;</span><br><span class="line">      <span class="comment">// 剩余金额小于0就不用再算了</span></span><br><span class="line">      <span class="keyword">if</span> (leftAmount &lt; <span class="number">0</span> || dp[leftAmount] == <span class="built_in">Number</span>.MAX_VALUE) <span class="keyword">continue</span>;</span><br><span class="line">      dp[currentAmount] = <span class="built_in">Math</span>.min(<span class="number">1</span> + dp[leftAmount], dp[currentAmount]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dp[amount] == <span class="built_in">Number</span>.MAX_VALUE ? -<span class="number">1</span> : dp[amount];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>js设计模式</title>
    <url>/blog/2020/11/11/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><blockquote>
<p>实例和方法糅合在一起，不符合单一职责</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.instance = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton.getInstance = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.instance) &#123;</span><br><span class="line">    <span class="built_in">this</span>.instance = <span class="keyword">new</span> Singleton(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.instance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = Singleton.getInstance(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> instance2 = Singleton.getInstance(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(instance1 === instance2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>代理单例模式</p>
<blockquote>
<p>符合单一职责</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ProxySingleton = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> Singleton(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = ProxySingleton(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> b = ProxySingleton(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">a.getName(); <span class="comment">// a</span></span><br><span class="line">b.getName(); <span class="comment">// a</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a === b);</span><br></pre></td></tr></table></figure>

<h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">subscriber</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._subscriber = subscriber;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">subscribe</span>(<span class="params">observer</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Subscription(observer, <span class="built_in">this</span>._subscriber);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subscription</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">observer, subscriber</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._subscriber = subscriber;</span><br><span class="line">    <span class="keyword">let</span> so = <span class="keyword">new</span> SubscriptionObserver(observer);</span><br><span class="line">    subscriber.call(<span class="literal">null</span>, so);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubscriptionObserver</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">observer</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._observer = observer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">next</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._observer.call(<span class="literal">null</span>, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> observable = <span class="keyword">new</span> Observable(<span class="function"><span class="keyword">function</span> (<span class="params">subscriber</span>) </span>&#123;</span><br><span class="line">  subscriber.next(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  subscriber.next(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  observable.subscribe(<span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;subscribe:&quot;</span>, params);</span><br><span class="line">  &#125;);</span><br><span class="line">  observable.subscribe(<span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;subscribe2:&quot;</span>, params);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>git常用操作</title>
    <url>/blog/2020/11/13/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="修改文件名"><a href="#修改文件名" class="headerlink" title="修改文件名"></a>修改文件名</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git mv file file1</span><br></pre></td></tr></table></figure>

<h3 id="比对文件"><a href="#比对文件" class="headerlink" title="比对文件"></a>比对文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 比对本地文件和暂存区的区别</span></span><br><span class="line">&gt; git diff file file1</span><br></pre></td></tr></table></figure>
<p>比对暂存区和本地仓库文件的区别</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 比对暂存区和本地仓库文件的区别</span></span><br><span class="line">&gt; git diff --cached file1</span><br><span class="line"></span><br><span class="line">diff --git a/demo/test2.js b/demo/test2.js</span><br><span class="line">+++ b/demo/test2.js</span><br><span class="line">@@ -1 +1,2 @@</span><br><span class="line">-console.log(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">\ No newline at end of file</span><br><span class="line">+console.log(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">+console.log(<span class="string">&quot;add content&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>从暂存区存到本地仓库。每次commit都会对提交的文件做一次快照</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交记录&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提交日志</span></span><br><span class="line">&gt; git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 唯一哈希值</span></span><br><span class="line">commit f473064e538bf9894d501e077aa1a394ead1f1e3 (HEAD -&gt; master, blob/master)</span><br><span class="line"><span class="comment"># 作者个人信息</span></span><br><span class="line">Author: liyq &lt;lyqhn2012@outlook.com&gt;</span><br><span class="line">Date:   Wed Nov 11 14:20:36 2020 +0800</span><br><span class="line">    <span class="comment"># 备注</span></span><br><span class="line">    add 动态规划</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复历史记录</span></span><br><span class="line">&gt; git reflog</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一行显示</span></span><br><span class="line">&gt; git <span class="built_in">log</span> --oneline</span><br><span class="line"></span><br><span class="line">PS E:\文档\Projects\MyBlob\hexo-blob\demo&gt; git <span class="built_in">log</span> --oneline</span><br><span class="line">f473064 (HEAD -&gt; master, blob/master) add 动态规划</span><br><span class="line">021d4e3 add 排序算法</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line"></span><br><span class="line">* 4439021 build</span><br><span class="line">*   24abb67 Merge branch <span class="string">&#x27;master&#x27;</span> of http://gitlab.com/system</span><br><span class="line">|\</span><br><span class="line">| * e14140c add 列表</span><br><span class="line">* | e78fb16 .</span><br><span class="line">|/</span><br><span class="line">* a8ae400 build hetong</span><br><span class="line">* 2345733 修改</span><br><span class="line">* 1ed693d build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并提交记录</span></span><br><span class="line">git rebase -i head~3</span><br><span class="line"></span><br><span class="line">git rebase master dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="文件回退"><a href="#文件回退" class="headerlink" title="文件回退"></a>文件回退</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提交文件到暂存区</span></span><br><span class="line">git add file2.js</span><br><span class="line"><span class="comment"># 取消暂存。</span></span><br><span class="line">git restore --staged .\test2.js</span><br><span class="line"><span class="comment"># 恢复文件。撤销修改</span></span><br><span class="line">git restore .\test2.js</span><br><span class="line"><span class="comment"># 从本地仓库恢复文件test2.js</span></span><br><span class="line">git checkout .\test2.js</span><br></pre></td></tr></table></figure>
<p>多次提交回退</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模拟多次提交</span></span><br><span class="line">&gt; git commit -m <span class="string">&quot;第1次提交&quot;</span></span><br><span class="line">&gt; git commit -m <span class="string">&quot;第2次提交&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 查看log</span></span><br><span class="line">&gt; git <span class="built_in">log</span> --oneline .\test2.js</span><br><span class="line"></span><br><span class="line">5e97611 (HEAD -&gt; master) 第二次提交</span><br><span class="line">4f68102 <span class="built_in">test</span></span><br><span class="line">0263eaf 提交</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 恢复</span></span><br><span class="line">git reset --hard 0263eaf</span><br></pre></td></tr></table></figure>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加标签</span></span><br><span class="line">git tag -a <span class="string">&quot;v1.0&quot;</span> -m <span class="string">&quot;标签信息&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看标签</span></span><br><span class="line">git tag</span><br><span class="line">git show v1.o</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除标签</span></span><br><span class="line">git tag v1.0 -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给某一次提交添加新标签</span></span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br><span class="line">git tag -a <span class="string">&quot;v1.0.2&quot;</span> [提交ID] -m <span class="string">&quot;标签信息&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到标签</span></span><br><span class="line">git tag [tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送标签</span></span><br><span class="line">git push origin --tags</span><br><span class="line">git push origin [tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除tag</span></span><br><span class="line">git tag -d [tagName]</span><br><span class="line"><span class="comment"># 删除本地tag 删除远程tag</span></span><br><span class="line">git push origin :refs/tags/[tagName]</span><br></pre></td></tr></table></figure>

<h3 id="暂存"><a href="#暂存" class="headerlink" title="暂存"></a>暂存</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行完更改消失了</span></span><br><span class="line">git stash push -m <span class="string">&quot;更改了某些东西&quot;</span></span><br><span class="line"><span class="comment"># 通过git stash list 查看已保存的暂存列表</span></span><br><span class="line">git stash list</span><br><span class="line"><span class="comment"># 恢复statsh保存的内容</span></span><br><span class="line">git stash pop</span><br><span class="line"><span class="comment"># 恢复id为stash@&#123;0&#125;的数据，但是不从stash列表中删除</span></span><br><span class="line">git stash apply stash@&#123;0&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>高阶函数</title>
    <url>/blog/2020/11/16/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="高阶函数（higher-order-function）"><a href="#高阶函数（higher-order-function）" class="headerlink" title="高阶函数（higher order function）"></a>高阶函数（higher order function）</h3><p>高阶函数的特点： 入参是函数， 我们常用的高阶函数有 map、filter、reduce、sort</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].map(<span class="function">(<span class="params">a</span>) =&gt;</span> a * <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subFunc1</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;subFunc1, props.name);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function subFunc2(props) &#123;</span></span><br><span class="line"><span class="string">  console.log(&quot;</span>subFunc2:<span class="string">&quot;, props.name);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function wrapWithUser(func) &#123;</span></span><br><span class="line"><span class="string">  let person = &#123; name: &quot;</span>currrent user<span class="string">&quot; &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  return () =&gt; func(person);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">// 传参</span></span><br><span class="line"><span class="string">function wrapWithUserParams(params) &#123;</span></span><br><span class="line"><span class="string">  return (func) =&gt; &#123;</span></span><br><span class="line"><span class="string">    func(params);</span></span><br><span class="line"><span class="string">  &#125;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">// 无参</span></span><br><span class="line"><span class="string">wrapWithUser(subFunc1)();</span></span><br><span class="line"><span class="string">wrapWithUser(subFunc2)();</span></span><br><span class="line"><span class="string">// 带参</span></span><br><span class="line"><span class="string">wrapWithUserParams(&#123; name: &quot;</span>func1<span class="string">&quot; &#125;)(subFunc1);</span></span><br><span class="line"><span class="string">wrapWithUserParams(&#123; name: &quot;</span>func2<span class="string">&quot; &#125;)(subFunc2);</span></span><br></pre></td></tr></table></figure>

<h3 id="React-中的高阶组件"><a href="#React-中的高阶组件" class="headerlink" title="React 中的高阶组件"></a>React 中的高阶组件</h3><p>我们最常见的应该是 React 中高阶组件，其实就是高阶函数的应用。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> State &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> wrapWithUserName = <span class="function">(<span class="params">WrappedComponent: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span>&lt;<span class="title">any</span>, <span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> state: State = &#123;</span><br><span class="line">      name: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">componentWillMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> name = <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123; name &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> <span class="attr">name</span>=<span class="string">&#123;this.state.name&#125;</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>React 组件劫持</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hijackHoc</span>&lt;<span class="title">T</span> <span class="title">extends</span> </span>&#123; <span class="keyword">new</span> (...args: <span class="built_in">any</span>[]): <span class="built_in">any</span> &#125;&gt;(</span><br><span class="line">  component: T</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.handleClick();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> paranet = <span class="built_in">super</span>.render();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> React.cloneElement(parent, &#123;</span><br><span class="line">        onClick: <span class="function">() =&gt;</span> <span class="built_in">this</span>.handleClick(),</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>React 高阶组件使用方法</p>
<ol>
<li>用装饰器</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">@hijackHoc</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HijackComponent</span> <span class="keyword">extends</span> <span class="title">Component</span>&lt;<span class="title">Props</span>, <span class="title">State</span>&gt; </span>&#123;</span><br><span class="line">  state: State = &#123;</span><br><span class="line">    width: <span class="number">70</span>,</span><br><span class="line">    height: <span class="number">90</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      weight: <span class="built_in">this</span>.state.weight! + <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>传参方式，参考高阶函数用法</li>
</ol>
]]></content>
      <tags>
        <tag>高阶函数</tag>
        <tag>高阶组件</tag>
      </tags>
  </entry>
  <entry>
    <title>npm发布开源库</title>
    <url>/blog/2020/11/16/npm%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93/</url>
    <content><![CDATA[<p>通过 npm 开源或私有库，解决组件共用的问题</p>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>创建项目目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir date-with-format</span><br><span class="line"><span class="built_in">cd</span> date-with-format</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果用到ts需要安装ts依赖</span></span><br><span class="line">npm install typescript -D</span><br><span class="line"><span class="comment"># tsc -v 全局环境版本</span></span><br><span class="line"><span class="comment"># npx tsc -v 目录下环境版本</span></span><br><span class="line">npx tsc -v</span><br><span class="line"><span class="comment"># 生成tsconfig.json</span></span><br><span class="line">npx tsc --init</span><br></pre></td></tr></table></figure>

<p>生成 package.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p>package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;date-with-format&quot;</span>, <span class="comment">// 开源库名称</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>, <span class="comment">// 发布的版本号</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;dist/index.js&quot;</span>, <span class="comment">// 入口文件</span></span><br><span class="line">  <span class="attr">&quot;types&quot;</span>: <span class="string">&quot;dist/index.d.ts&quot;</span>, <span class="comment">// 生成定义文件的绝对路径，通过tsconfig.json 中 declaration属性配置自动生成</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;npx tsc -p .&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span>: <span class="string">&quot;^4.0.5&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>tsconfig.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es5&quot;</span> <span class="comment">/* Specify ECMAScript target version: &#x27;ES3&#x27; (default), &#x27;ES5&#x27;, &#x27;ES2015&#x27;, &#x27;ES2016&#x27;, &#x27;ES2017&#x27;, &#x27;ES2018&#x27;, &#x27;ES2019&#x27;, &#x27;ES2020&#x27;, or &#x27;ESNEXT&#x27;. */</span>,</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span> <span class="comment">/* Specify module code generation: &#x27;none&#x27;, &#x27;commonjs&#x27;, &#x27;amd&#x27;, &#x27;system&#x27;, &#x27;umd&#x27;, &#x27;es2015&#x27;, &#x27;es2020&#x27;, or &#x27;ESNext&#x27;. */</span>,</span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span>: <span class="literal">true</span> <span class="comment">/* Generates corresponding &#x27;.d.ts&#x27; file. */</span>,</span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span>: <span class="literal">true</span> <span class="comment">/* Generates corresponding &#x27;.map&#x27; file. */</span>,</span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;./dist&quot;</span> <span class="comment">/* Redirect output structure to the directory. */</span>,</span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span>: <span class="string">&quot;./src&quot;</span> <span class="comment">/* Specify the root directory of input files. Use to control the output directory structure with --outDir. */</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span> <span class="comment">/* Enable all strict type-checking options. */</span>,</span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span> <span class="comment">/* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies &#x27;allowSyntheticDefaultImports&#x27;. */</span>,</span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span> <span class="comment">/* Skip type checking of declaration files. */</span>,</span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">true</span> <span class="comment">/* Disallow inconsistently-cased references to the same file. */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行 build 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p>发布到 npm,这里需要先注册 npm 账户，然后通过 npm login 登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure>

<p>发布之后，过一会可以通过以下命令安装，导入使用就可以了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i date-with-format</span><br></pre></td></tr></table></figure>

<p>测试发布的开源库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let dateWithFormat &#x3D; require(&quot;date-with-format&quot;).default</span><br><span class="line"></span><br><span class="line">let formatDate &#x3D; dateWithFormat(Date.now())</span><br><span class="line"></span><br><span class="line">console.log(formatDate); &#x2F;&#x2F; 2020-11-16</span><br></pre></td></tr></table></figure>

<p>重新发布需要生成一个新的版本号</p>
<blockquote>
<p>语义化版本号<a href="https://semver.org/lang/zh-CN/">参考</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># npm version  [major | minor | patch | premajor | preminor | prepatch | prerelease]</span><br><span class="line"># 修订号，0.0.1 -&gt; 0.0.2</span><br><span class="line">npm version patch</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>react</title>
    <url>/blog/2020/11/16/react/</url>
    <content><![CDATA[<h3 id="redux基本实现原理"><a href="#redux基本实现原理" class="headerlink" title="redux基本实现原理"></a>redux基本实现原理</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> state;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">    state = reducer(state, action);</span><br><span class="line">    <span class="keyword">return</span> action;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dispatch(&#123; <span class="attr">type</span>: <span class="string">&quot;init&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getState,</span><br><span class="line">    dispatch</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>Intersection Observer API</title>
    <url>/blog/2020/11/17/Intersection%20Observer%20API/</url>
    <content><![CDATA[<p>IntersectionObserver API 提供了一种异步观察目标元素与其祖先元素或顶级文档视窗(viewport)交叉状态的方法</p>
<blockquote>
<p>from： MDN</p>
</blockquote>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>通过目标元素是否在可视区，来实现无限滚动</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> intersectionObserver = <span class="keyword">new</span> IntersectionObserver(<span class="function"><span class="keyword">function</span> (<span class="params">entries</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// intersectionRatio &lt;= 0， 目标元素不在可视区，也就是看不见</span></span><br><span class="line">  <span class="keyword">if</span> (entries[<span class="number">0</span>].intersectionRatio &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  loadItems(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Loaded new items&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 开始观察元素</span></span><br><span class="line">intersectionObserver.observe(<span class="built_in">document</span>.querySelector(<span class="string">&quot;.scrollerFooter&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> intersectionObserver = <span class="keyword">new</span> IntersectionObserver(callback, &#123;</span><br><span class="line">  threshold: [<span class="number">0.5</span>, <span class="number">1</span>], <span class="comment">// 指定阈值时触发</span></span><br><span class="line">  root: <span class="built_in">document</span>.querySelector(<span class="string">&quot;.scrollerFooter&quot;</span>), <span class="comment">// 指定root</span></span><br><span class="line">  rootMargin: <span class="string">&quot;&quot;</span>, <span class="comment">// 可控制交叉区域的大小</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>通过观察器的返回值，使用 API 提供的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 观察目标</span></span><br><span class="line">intersectionObserver.observe(<span class="built_in">document</span>.querySelector(<span class="string">&quot;.scrollerFooter&quot;</span>));</span><br><span class="line"><span class="comment">// 取消观察，特定目标</span></span><br><span class="line">intersectionObserver.unobserve(<span class="built_in">document</span>.querySelector(<span class="string">&quot;.scrollerFooter&quot;</span>));</span><br><span class="line"><span class="comment">// 返回以观察目标</span></span><br><span class="line">intersectionObserver.takeRecords();</span><br><span class="line"><span class="comment">// 停止观察，不需要参数</span></span><br><span class="line">intersectionObserver.disconnect();</span><br></pre></td></tr></table></figure>

<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>回调函数中 entries[] 属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">boundingClientRect 目标矩形区域信息</span><br><span class="line">intersectionRatio 目标元素可见比例，intersectionRatio &#x3D;&#x3D; 1 完全可见， intersectionRatio &lt;&#x3D; 0 不在可视范围内</span><br><span class="line">intersectionRect 与跟区域相交部分的信息 &#x2F;&#x2F; TODO</span><br><span class="line">rootBounds 跟元素的矩形区域信息</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web api</category>
      </categories>
  </entry>
  <entry>
    <title>webpack</title>
    <url>/blog/2020/11/17/webpack/</url>
    <content><![CDATA[<h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><p>该配置只是介绍，在实际项目中取所需即可，version 5</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 已过时</span></span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">&quot;extract-text-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">&quot;production&quot;</span>, <span class="comment">// &quot;production&quot; | &quot;development&quot; | &quot;none&quot;</span></span><br><span class="line">  entry: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&quot;bundle.js&quot;</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// filename: &quot;[name].js&quot;, // 用于多个入口点(entry point)（出口点？）</span></span><br><span class="line">    <span class="comment">// filename: &quot;[chunkhash].js&quot;, // 用于长效缓存</span></span><br><span class="line">    <span class="comment">// filename: &quot;[name].[hash].bundle.js&quot;</span></span><br><span class="line">    <span class="comment">// filename: &quot;[id].bundle.js&quot;</span></span><br><span class="line"></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="comment">// 生成文件的路径信息</span></span><br><span class="line">    pathinfo: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 资源文件的访问路径，如果使用CDN方式，可以修改此配置</span></span><br><span class="line">    <span class="comment">// publicPath: &quot;https://cdn.example.com/&quot;,</span></span><br><span class="line">    publicPath: <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义资源目录/文件名</span></span><br><span class="line">    assetModuleFilename: <span class="string">&quot;images/[hash][ext][query]&quot;</span>,</span><br><span class="line">    <span class="comment">// 与libraryTarget一起使用</span></span><br><span class="line">    library: <span class="string">&quot;mylibrary&quot;</span>,</span><br><span class="line">    <span class="comment">// umd 统一模块定义，支持amd commonjs等</span></span><br><span class="line">    libraryTarget: <span class="string">&quot;umd&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 包(bundle)应该运行的环境</span></span><br><span class="line">  <span class="comment">// 可以维护多个</span></span><br><span class="line">  target: [<span class="string">&quot;node12.18&quot;</span>, <span class="string">&quot;es5&quot;</span>, <span class="string">&quot;web&quot;</span>],</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 打包前清理构建目录</span></span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将css抽离单独的css文件，配合module.rules使用</span></span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">&quot;styles.css&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成index.html，并自动将bundle.js导入</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="comment">// html title属性</span></span><br><span class="line">      title: <span class="string">&quot;Hot Module Replacement&quot;</span>,</span><br><span class="line">      <span class="comment">// 生成html的文件名</span></span><br><span class="line">      filename: <span class="string">&quot;index2.html&quot;</span>,</span><br><span class="line">      <span class="comment">// &lt;base href=&quot;http://example.com/some/page.html&quot; target=&quot;_blank&quot;&gt;</span></span><br><span class="line">      base: &#123;</span><br><span class="line">        <span class="comment">// string | object</span></span><br><span class="line">        href: <span class="string">&quot;http://example.com/some/page.html&quot;</span>,</span><br><span class="line">        target: <span class="string">&quot;_blank&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 【编译时】可以定义的全局常量。eg:</span></span><br><span class="line">    <span class="comment">// if (!PRODUCTION) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;Debug info&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      PRODUCTION: <span class="built_in">JSON</span>.stringify(<span class="literal">true</span>),</span><br><span class="line">      VERSION: <span class="built_in">JSON</span>.stringify(<span class="string">&quot;5fa3b9&quot;</span>),</span><br><span class="line">      BROWSER_SUPPORTS_HTML5: <span class="literal">true</span>,</span><br><span class="line">      TWO: <span class="string">&quot;1+1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;typeof window&quot;</span>: <span class="built_in">JSON</span>.stringify(<span class="string">&quot;object&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 优化属性</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    <span class="comment">// 告知 webpack 使用 TerserPlugin 或其它在 optimization.minimizer 定义的插件压缩 bundle。</span></span><br><span class="line">    minimize: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多个chunk共享一个实例</span></span><br><span class="line">    runtimeChunk: <span class="string">&quot;single&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成模块ID需要的算法</span></span><br><span class="line">    <span class="comment">// &#x27;natural&#x27; | &#x27;named&#x27; | &#x27;deterministic&#x27; | &#x27;size&#x27;</span></span><br><span class="line">    moduleIds: <span class="string">&quot;deterministic&quot;</span>, <span class="comment">// deterministic有益于长期缓存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过此属性自定义压缩bundle插件</span></span><br><span class="line">    minimizer: [</span><br><span class="line">      <span class="keyword">new</span> TerserPlugin(&#123;</span><br><span class="line">        <span class="comment">// 并发进程数</span></span><br><span class="line">        parallel: <span class="literal">true</span>, <span class="comment">// boolean | number</span></span><br><span class="line">        sourceMap: <span class="literal">true</span>, <span class="comment">// 如果在生产环境中使用 source-maps，必须设置为 true</span></span><br><span class="line">        <span class="comment">// https://github.com/webpack-contrib/terser-webpack-plugin#terseroptions</span></span><br><span class="line">        terserOptions: &#123;</span><br><span class="line">          compress: &#123;</span><br><span class="line">            <span class="comment">// 删除所有console.*方法</span></span><br><span class="line">            drop_console: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    removeAvailableModules: <span class="literal">false</span>,</span><br><span class="line">    removeEmptyChunks: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// v4版本开始，使用此属性代替CommonsChunkPlugin</span></span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">&quot;async&quot;</span>, <span class="comment">// all | async | () =&gt; boolean // 函数可用于排除模块</span></span><br><span class="line">      <span class="comment">// 生成chunk的最小值</span></span><br><span class="line">      minSize: <span class="number">20000</span>,</span><br><span class="line">      minRemainingSize: <span class="number">0</span>,</span><br><span class="line">      maxSize: <span class="number">0</span>,</span><br><span class="line">      <span class="comment">// 拆分前，必须共享的chunks数</span></span><br><span class="line">      minChunks: <span class="number">1</span>,</span><br><span class="line">      maxAsyncRequests: <span class="number">30</span>,</span><br><span class="line">      maxInitialRequests: <span class="number">30</span>,</span><br><span class="line">      automaticNameDelimiter: <span class="string">&quot;~&quot;</span>,</span><br><span class="line">      enforceSizeThreshold: <span class="number">50000</span>,</span><br><span class="line">      <span class="comment">// TODO</span></span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        defaultVendors: &#123;</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          priority: -<span class="number">10</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">          minChunks: <span class="number">2</span>,</span><br><span class="line">          priority: -<span class="number">20</span>,</span><br><span class="line">          reuseExistingChunk: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 例如，使用cdn时，可以用</span></span><br><span class="line">  <span class="comment">// 防止将某些 import 的包(package)打包到 bundle 中，而是在运行时(runtime)再去从外部获取这些扩展依赖</span></span><br><span class="line">  externals: &#123;</span><br><span class="line">    jquery: <span class="string">&quot;jQuery&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 模块如何解析</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">// 引用必须带扩展名</span></span><br><span class="line">    <span class="comment">// require(&#x27;./foo.js&#x27;)</span></span><br><span class="line">    enforceExtension: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// import文件时，按顺序解析扩展名</span></span><br><span class="line">    <span class="comment">// import File from &#x27;../path/to/file&#x27;;</span></span><br><span class="line">    extensions: [<span class="string">&#x27;.wasm&#x27;</span>, <span class="string">&#x27;.mjs&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 别名，根据package.json中的browser(数组中定义的字段)属性配置, 见 resolve.aliasFields</span></span><br><span class="line">    aliasFields: [<span class="string">&#x27;browser&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个别名，改变引入方式。</span></span><br><span class="line">    <span class="comment">// import &#123; square &#125; from &quot;@/math.js&quot;;</span></span><br><span class="line">    <span class="comment">// import &#123; square &#125; from &quot;src/math.js&quot;;</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">&quot;@&quot;</span>: path.resolve(__dirname, <span class="string">&quot;src&quot;</span>),</span><br><span class="line">      <span class="comment">// 末尾加$. 精确匹配</span></span><br><span class="line">      <span class="comment">// import Test1 from &#x27;xyz&#x27;;</span></span><br><span class="line">      xyz$: path.resolve(__dirname, <span class="string">&quot;path/to/file.js&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 解析失败时，访问指定的module</span></span><br><span class="line">    fallback: &#123;</span><br><span class="line">      xyz: path.resolve(__dirname, <span class="string">&quot;path/to/file.js&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 告诉 webpack 解析模块时应该搜索的目录。</span></span><br><span class="line">    modules: [path.resolve(__dirname, <span class="string">&#x27;src&#x27;</span>), <span class="string">&#x27;node_modules&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="comment">// TODO 资源访问地址</span></span><br><span class="line">    public: <span class="string">&quot;myapp.test:80&quot;</span>,</span><br><span class="line">    publicPath: <span class="string">&quot;/assets/&quot;</span>,</span><br><span class="line">    <span class="comment">// 开启gzip压缩</span></span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    port: <span class="number">9000</span>,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        target: <span class="string">&quot;http://localhost:3000&quot;</span>,</span><br><span class="line">        <span class="comment">// 重写path /api =&gt; /path&quot;</span></span><br><span class="line">        pathRewrite: &#123; <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;/path&quot;</span> &#125;,</span><br><span class="line">        <span class="comment">// 不适用https访问</span></span><br><span class="line">        secure: <span class="literal">false</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 代理多个path，指向同一个地址</span></span><br><span class="line">    proxy: [</span><br><span class="line">      &#123;</span><br><span class="line">        context: [<span class="string">&quot;/auth&quot;</span>, <span class="string">&quot;/api&quot;</span>],</span><br><span class="line">        target: <span class="string">&quot;http://localhost:3000&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// css样式解释器</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="comment">// 需要babel编译的文件</span></span><br><span class="line">        include: path.resolve(__dirname, <span class="string">&quot;src&quot;</span>),</span><br><span class="line">        loader: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&quot;ts-loader&quot;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              <span class="comment">// 不适用类型检查，提高构建效率</span></span><br><span class="line">              transpileOnly: <span class="literal">true</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 在js中导入图片，详见：Asset Modules</span></span><br><span class="line">      <span class="comment">// import Icon from &quot;../assets/images/01-1.png&quot;;</span></span><br><span class="line">      <span class="comment">//  const myIcon = new Image();</span></span><br><span class="line">      <span class="comment">//  myIcon.src = Icon;</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|svg|jpg|jpeg|gif)$/i</span>,</span><br><span class="line">        type: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 配合ExtractTextPlugin使用</span></span><br><span class="line">      <span class="comment">//use: ExtractTextPlugin.extract(&#123;</span></span><br><span class="line">      <span class="comment">//   fallback: &quot;style-loader&quot;,</span></span><br><span class="line">      <span class="comment">//   use: &quot;css-loader&quot;</span></span><br><span class="line">      <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 加载字体</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf)$/i</span>,</span><br><span class="line">        type: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// import Notes from &#x27;./data.csv&#x27;;</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(csv|tsv)$/i</span>,</span><br><span class="line">        use: [<span class="string">&quot;csv-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.xml$/i</span>,</span><br><span class="line">        use: [<span class="string">&quot;xml-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="模块热替换"><a href="#模块热替换" class="headerlink" title="模块热替换"></a>模块热替换</h3><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p>使用 inline-source-map 工具，可以追踪错误和警告在源代码中的位置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Asset-Modules"><a href="#Asset-Modules" class="headerlink" title="Asset Modules"></a>Asset Modules</h3><h3 id="代码分割"><a href="#代码分割" class="headerlink" title="代码分割"></a>代码分割</h3><ol>
<li>单页面多入口</li>
</ol>
<p>单页面多入口时，需要添加配置 <code>optimization.runtimeChunk = &quot;single&quot;</code>，使每个模块共享一个实例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="string">&quot;component-1&quot;</span>: <span class="string">&quot;./src/component-1.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;component-2&quot;</span>: <span class="string">&quot;./src/component-2.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// inline-cheap-source-map | eval-source-map and so on</span></span><br><span class="line">  devtool: <span class="string">&quot;inline-source-map&quot;</span>, <span class="comment">// 构建速度相对cheap缓慢</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: <span class="string">&quot;Production&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    runtimeChunk: <span class="string">&quot;single&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&quot;[name].[contenthash].bundle.js&quot;</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>component-1.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> obj <span class="keyword">from</span> <span class="string">&quot;./obj.js&quot;</span>;</span><br><span class="line">obj.count++;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;component-1&quot;</span>, obj.count);</span><br></pre></td></tr></table></figure>

<p>component-2.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> obj <span class="keyword">from</span> <span class="string">&quot;./obj.js&quot;</span>;</span><br><span class="line">obj.count++;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;component-2&quot;</span>, obj.count);</span><br></pre></td></tr></table></figure>

<p>obj.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br></pre></td></tr></table></figure>

<p>添加 runtimeChunk: “single”，共享一个实例</p>
<img src="/blog/.io//2020/11/17/webpack/runtimeChunk-single.png" class>

<p>两个模块分别实例，count 为 1</p>
<img src="/blog/.io//2020/11/17/webpack/no-runtimeChunk-single.png" class>

<ol start="2">
<li>防止重复</li>
</ol>
<p>添加属性 dependOn 使两个 chunk 之间共享一个 module</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">    another: <span class="string">&quot;./src/another-module.js&quot;</span>,</span><br><span class="line">    index: &#123;</span><br><span class="line">      <span class="keyword">import</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">      dependOn: <span class="string">&quot;shared&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    another: &#123;</span><br><span class="line">      <span class="keyword">import</span>: <span class="string">&quot;./src/another-module.js&quot;</span>,</span><br><span class="line">      dependOn: <span class="string">&quot;shared&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    shared: <span class="string">&quot;lodash&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&quot;[name].bundle.js&quot;</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>动态导入</li>
</ol>
<p>webpack 提供的接口<code>import() or require.ensure</code>，实现模块的懒加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> element = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">import</span>(<span class="string">&quot;lodash&quot;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">&#123; <span class="keyword">default</span>: _ &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> element = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"></span><br><span class="line">      element.innerHTML = _.join([<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;webpack&quot;</span>], <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> element;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="string">&quot;An error occurred while loading the component&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getComponent().then(<span class="function">(<span class="params">component</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(component);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><ol>
<li>resolve.aliasFields</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    aliasFields: [<span class="string">&quot;browser&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">&quot;browser&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;module-a&quot;</span>: <span class="string">&quot;./webpack/browser.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> br <span class="keyword">from</span> <span class="string">&quot;module-a&quot;</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>path-to-regxp</title>
    <url>/blog/2020/11/18/path-to-regxp/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># current: v6.2.0</span></span><br><span class="line">npm install path-to-regexp --save</span><br></pre></td></tr></table></figure>

<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; pathToRegexp, match, parse, compile &#125; = <span class="built_in">require</span>(<span class="string">&quot;path-to-regexp&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>match</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加decode时，返回结果会被解码</span></span><br><span class="line"><span class="keyword">const</span> matchPath = match(<span class="string">&quot;/user/:id&quot;</span>, &#123; <span class="attr">decode</span>: <span class="built_in">decodeURIComponent</span> &#125;);</span><br><span class="line"></span><br><span class="line">matchPath(<span class="string">&quot;/user/1&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">output: </span></span><br><span class="line"><span class="comment">&#123; path: &#x27;/user/1&#x27;,</span></span><br><span class="line"><span class="comment">  index: 0,</span></span><br><span class="line"><span class="comment">  params: [Object: null prototype] &#123; id: &#x27;1&#x27; &#125; &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">matchPath(<span class="string">&quot;/user/&quot;</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">matchPath(<span class="string">&quot;/user/caf%C3%A9&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">output: </span></span><br><span class="line"><span class="comment">&#123; path: &#x27;/user/caf%C3%A9&#x27;,</span></span><br><span class="line"><span class="comment">  index: 0,</span></span><br><span class="line"><span class="comment">  params: [Object: null prototype] &#123; id: &#x27;café&#x27; &#125; &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>pathToRegexp</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> regexp = pathToRegexp(<span class="string">&quot;/:foo/:bar&quot;</span>);</span><br><span class="line"><span class="comment">// 返回值类型</span></span><br><span class="line"><span class="comment">// Object.prototype.toString.call(regexp) == [object RegExp]</span></span><br><span class="line"><span class="comment">// 找到文本返回一个结果数组</span></span><br><span class="line">regexp.exec(<span class="string">&quot;/test/route&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>parse</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回一个字符串和key的列表</span></span><br><span class="line"><span class="keyword">const</span> tokens = parse(<span class="string">&quot;/route/:foo/(.*)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tokens);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">  &quot;/route&quot;,</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    name: &quot;foo&quot;,</span></span><br><span class="line"><span class="comment">    prefix: &quot;/&quot;,</span></span><br><span class="line"><span class="comment">    suffix: &quot;&quot;,</span></span><br><span class="line"><span class="comment">    pattern: &quot;[^\\/#\\?]+?&quot;,</span></span><br><span class="line"><span class="comment">    modifier: &quot;&quot;,</span></span><br><span class="line"><span class="comment">  &#125;,</span></span><br><span class="line"><span class="comment">  &#123; name: 0, prefix: &quot;/&quot;, suffix: &quot;&quot;, pattern: &quot;.*&quot;, modifier: &quot;&quot; &#125;,</span></span><br><span class="line"><span class="comment">];</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>compile</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Make sure you encode your path segments consistently.</span></span><br><span class="line"><span class="keyword">const</span> toPath = compile(<span class="string">&quot;/user/:id&quot;</span>, &#123; <span class="attr">encode</span>: <span class="built_in">encodeURIComponent</span> &#125;);</span><br><span class="line"> </span><br><span class="line">toPath(&#123; <span class="attr">id</span>: <span class="number">123</span> &#125;); <span class="comment">//=&gt; &quot;/user/123&quot;</span></span><br><span class="line">toPath(&#123; <span class="attr">id</span>: <span class="string">&quot;café&quot;</span> &#125;); <span class="comment">//=&gt; &quot;/user/caf%C3%A9&quot;</span></span><br><span class="line">toPath(&#123; <span class="attr">id</span>: <span class="string">&quot;/&quot;</span> &#125;); <span class="comment">//=&gt; &quot;/user/%2F&quot;</span></span><br><span class="line"> </span><br><span class="line">toPath(&#123; <span class="attr">id</span>: <span class="string">&quot;:/&quot;</span> &#125;); <span class="comment">//=&gt; &quot;/user/%3A%2F&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Without `encode`, you need to make sure inputs are encoded correctly.</span></span><br><span class="line"><span class="keyword">const</span> toPathRaw = compile(<span class="string">&quot;/user/:id&quot;</span>);</span><br><span class="line"> </span><br><span class="line">toPathRaw(&#123; <span class="attr">id</span>: <span class="string">&quot;%3A%2F&quot;</span> &#125;); <span class="comment">//=&gt; &quot;/user/%3A%2F&quot;</span></span><br><span class="line">toPathRaw(&#123; <span class="attr">id</span>: <span class="string">&quot;:/&quot;</span> &#125;, &#123; <span class="attr">validate</span>: <span class="literal">false</span> &#125;); <span class="comment">//=&gt; &quot;/user/:/&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> toPathRepeated = compile(<span class="string">&quot;/:segment+&quot;</span>);</span><br><span class="line"> </span><br><span class="line">toPathRepeated(&#123; <span class="attr">segment</span>: <span class="string">&quot;foo&quot;</span> &#125;); <span class="comment">//=&gt; &quot;/foo&quot;</span></span><br><span class="line">toPathRepeated(&#123; <span class="attr">segment</span>: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>] &#125;); <span class="comment">//=&gt; &quot;/a/b/c&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> toPathRegexp = compile(<span class="string">&quot;/user/:id(\\d+)&quot;</span>);</span><br><span class="line"> </span><br><span class="line">toPathRegexp(&#123; <span class="attr">id</span>: <span class="number">123</span> &#125;); <span class="comment">//=&gt; &quot;/user/123&quot;</span></span><br><span class="line">toPathRegexp(&#123; <span class="attr">id</span>: <span class="string">&quot;123&quot;</span> &#125;); <span class="comment">//=&gt; &quot;/user/123&quot;</span></span><br><span class="line">toPathRegexp(&#123; <span class="attr">id</span>: <span class="string">&quot;abc&quot;</span> &#125;); <span class="comment">//=&gt; Throws `TypeError`.</span></span><br><span class="line">toPathRegexp(&#123; <span class="attr">id</span>: <span class="string">&quot;abc&quot;</span> &#125;, &#123; <span class="attr">validate</span>: <span class="literal">false</span> &#125;); <span class="comment">//=&gt; &quot;/user/abc&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Tapable</title>
    <url>/blog/2020/11/20/tapable/</url>
    <content><![CDATA[<blockquote>
<p>version 2.1.1</p>
</blockquote>
<p>Tapable 暴露很多钩子函数，分为同步钩子和异步钩子两部分。同步钩子只有 <code>tap()</code>一个可用方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  SyncHook,</span><br><span class="line">  SyncBailHook,</span><br><span class="line">  SyncWaterfallHook,</span><br><span class="line">  SyncLoopHook,</span><br><span class="line">  AsyncParallelHook,</span><br><span class="line">  AsyncParallelBailHook,</span><br><span class="line">  AsyncSeriesHook,</span><br><span class="line">  AsyncSeriesBailHook,</span><br><span class="line">  AsyncSeriesWaterfallHook,</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&quot;tapable&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="SyncHook"><a href="#SyncHook" class="headerlink" title="SyncHook"></a>SyncHook</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; SyncHook &#125; = <span class="built_in">require</span>(<span class="string">&quot;tapable&quot;</span>);</span><br><span class="line"><span class="comment">// 创建同步钩子</span></span><br><span class="line"><span class="keyword">let</span> hook = <span class="keyword">new</span> SyncHook([<span class="string">&quot;newSpeed&quot;</span>]);</span><br><span class="line"></span><br><span class="line">hook.tap(<span class="string">&quot;1&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(params);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">hook.call(<span class="string">&quot;参数&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; SyncHook &#125; = <span class="built_in">require</span>(<span class="string">&quot;tapable&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.hooks = &#123;</span><br><span class="line">      accelerate: <span class="keyword">new</span> SyncHook([<span class="string">&quot;newSpeed&quot;</span>]),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myCar = <span class="keyword">new</span> Car();</span><br><span class="line"></span><br><span class="line">myCar.hooks.accelerate.tap(<span class="string">&quot;1&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">speed</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;传入的参数：&quot;</span>, speed);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myCar.hooks.accelerate.tap(<span class="string">&quot;2&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">speed</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;传入的参数：&quot;</span>, speed);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myCar.hooks.accelerate.call(<span class="string">&quot;50&quot;</span>);</span><br><span class="line"><span class="comment">// log：</span></span><br><span class="line"><span class="comment">// 传入的参数： 50</span></span><br><span class="line"><span class="comment">// 传入的参数： 50</span></span><br></pre></td></tr></table></figure>

<h3 id="SyncBailHook"><a href="#SyncBailHook" class="headerlink" title="SyncBailHook"></a>SyncBailHook</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; SyncBailHook &#125; = <span class="built_in">require</span>(<span class="string">&quot;tapable&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hook = <span class="keyword">new</span> SyncBailHook([<span class="string">&quot;params&quot;</span>]);</span><br><span class="line"></span><br><span class="line">hook.tap(<span class="string">&quot;熔断钩子&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;返回值不等于undefined，会阻止函数向下的执行&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;中断&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">hook.tap(<span class="string">&quot;熔断钩子&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;这里不会被执行&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">hook.call(<span class="string">&quot;传入的参数&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="SyncWaterfallHook"><a href="#SyncWaterfallHook" class="headerlink" title="SyncWaterfallHook"></a>SyncWaterfallHook</h3><p>将返回值当作参数，传递给下一个函数。上一个函数没有返回值，参数的默认为调用时传入的参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; SyncWaterfallHook &#125; = <span class="built_in">require</span>(<span class="string">&quot;tapable&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> hook = <span class="keyword">new</span> SyncWaterfallHook([<span class="string">&quot;params&quot;</span>]);</span><br><span class="line"></span><br><span class="line">hook.tap(<span class="string">&quot;SyncWaterfallHook1&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;SyncWaterfallHook1:&quot;</span>, param);</span><br><span class="line">  <span class="keyword">return</span> param;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">hook.tap(<span class="string">&quot;SyncWaterfallHook2&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;SyncWaterfallHook2:&quot;</span>, param);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">hook.call(<span class="string">&quot;传入的参数&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// SyncWaterfallHook1: 传入的参数</span></span><br><span class="line"><span class="comment">// SyncWaterfallHook2: 传入的参数</span></span><br></pre></td></tr></table></figure>

<h3 id="SyncLoopHook"><a href="#SyncLoopHook" class="headerlink" title="SyncLoopHook"></a>SyncLoopHook</h3><p>如果返回值不是 undefined，则会循环执行当前函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hook = <span class="keyword">new</span> SyncLoopHook([<span class="string">&quot;params&quot;</span>]);</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">hook.tap(<span class="string">&quot;SyncLoopHook1&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(count);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (++count &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">hook.tap(<span class="string">&quot;SyncLoopHook2&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;SyncLoopHook:&quot;</span>, param);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">hook.call(<span class="string">&quot;传入的参数&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0,1,2,3,4,5</span></span><br><span class="line"><span class="comment">// SyncLoopHook: 传入的参数</span></span><br></pre></td></tr></table></figure>

<h3 id="AsyncParallelHook"><a href="#AsyncParallelHook" class="headerlink" title="AsyncParallelHook"></a>AsyncParallelHook</h3><p>异步并行的钩子, 所有函数执行完毕之后，执行最后的回调，打印出 end</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hook = <span class="keyword">new</span> AsyncParallelHook([<span class="string">&quot;param1&quot;</span>]);</span><br><span class="line"></span><br><span class="line">hook.tapAsync(<span class="string">&quot;AsyncParallelHook1&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">arg, cb</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;AsyncParallelHook1&quot;</span>, arg);</span><br><span class="line">    cb();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// tapAsync必须调用cb回调函数，否则不会执行最后的完成回调函数</span></span><br><span class="line">hook.tapAsync(<span class="string">&quot;AsyncParallelHook2&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">arg, cb</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;AsyncParallelHook2&quot;</span>, arg);</span><br><span class="line">  cb();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 这里没有使用tapAsunc，不需要使用cb</span></span><br><span class="line">hook.tap(<span class="string">&quot;AsyncParallelHook3&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;AsyncParallelHook3&quot;</span>, arg);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">&quot;call time&quot;</span>);</span><br><span class="line">hook.callAsync(<span class="string">&quot;参数&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">&quot;call time&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// AsyncParallelHook2 参数</span></span><br><span class="line"><span class="comment">// AsyncParallelHook3 参数</span></span><br><span class="line"><span class="comment">// AsyncParallelHook1 参数</span></span><br><span class="line"><span class="comment">// end</span></span><br><span class="line"><span class="comment">// call time: 1004.477ms</span></span><br></pre></td></tr></table></figure>

<p>tapPromise()方法，返回值必须是一个 promise 对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hook = <span class="keyword">new</span> AsyncParallelHook([<span class="string">&quot;param1&quot;</span>]);</span><br><span class="line"></span><br><span class="line">hook.tapPromise(<span class="string">&quot;AsyncParallelHook1&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">hook.tapPromise(<span class="string">&quot;AsyncParallelHook2&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">2000</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">&quot;call time&quot;</span>);</span><br><span class="line"><span class="comment">// 两种调用方法， callAsync, promise</span></span><br><span class="line"><span class="comment">// hook.callAsync(&quot;参数&quot;, () =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;end&#x27;);</span></span><br><span class="line"><span class="comment">//   console.timeEnd(&quot;call time&quot;)</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">hook.promise(<span class="string">&quot;参数&quot;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">&quot;call time&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line"><span class="comment">// end</span></span><br><span class="line"><span class="comment">// call time: 2006.843ms</span></span><br></pre></td></tr></table></figure>

<h3 id="AsyncParallelBailHook"><a href="#AsyncParallelBailHook" class="headerlink" title="AsyncParallelBailHook"></a>AsyncParallelBailHook</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TODO</span></span><br><span class="line">cb(err, <span class="string">&quot;args&quot;</span>); <span class="comment">// 报错会直接执行最后回调，但是并不影响下一个方法的执行</span></span><br></pre></td></tr></table></figure>

<h3 id="AsyncSeriesHook"><a href="#AsyncSeriesHook" class="headerlink" title="AsyncSeriesHook"></a>AsyncSeriesHook</h3><p>异步串行，顺序执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hook = <span class="keyword">new</span> AsyncSeriesHook([<span class="string">&quot;param1&quot;</span>]);</span><br><span class="line"></span><br><span class="line">hook.tapAsync(<span class="string">&quot;AsyncSeriesHook1&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">arg, cb</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;AsyncSeriesHook1:&quot;</span>, arg);</span><br><span class="line">    cb();</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">hook.tapAsync(<span class="string">&quot;AsyncSeriesHook2&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">arg, cb</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;AsyncSeriesHook2:&quot;</span>, arg);</span><br><span class="line">    cb();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">&quot;call time&quot;</span>);</span><br><span class="line">hook.callAsync(<span class="string">&quot;参数&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">&quot;call time&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// AsyncSeriesHook1: 参数</span></span><br><span class="line"><span class="comment">// AsyncSeriesHook2: 参数</span></span><br><span class="line"><span class="comment">// end</span></span><br><span class="line"><span class="comment">// call time: 3012.718ms</span></span><br></pre></td></tr></table></figure>

<h3 id="AsyncSeriesWaterfallHook"><a href="#AsyncSeriesWaterfallHook" class="headerlink" title="AsyncSeriesWaterfallHook"></a>AsyncSeriesWaterfallHook</h3><p>把回调函数的第二个参数，当作入参传给下一个函数。回调函数 cb 第一个参数如果不为 null，函数不会向下执行，直接执行最后回调</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hook = <span class="keyword">new</span> AsyncSeriesWaterfallHook([<span class="string">&quot;param1&quot;</span>]);</span><br><span class="line"></span><br><span class="line">hook.tapAsync(<span class="string">&quot;AsyncSeriesWaterfallHook1&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">arg, cb</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;AsyncSeriesWaterfallHook1:&quot;</span>, arg);</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="string">&quot;AsyncSeriesWaterfallHook1&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">hook.tapAsync(<span class="string">&quot;AsyncSeriesWaterfallHook2&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">arg, cb</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;AsyncSeriesWaterfallHook2:&quot;</span>, arg);</span><br><span class="line">    cb();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">&quot;call time&quot;</span>);</span><br><span class="line">hook.callAsync(<span class="string">&quot;参数&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">&quot;call time&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// AsyncSeriesWaterfallHook1: 参数</span></span><br><span class="line"><span class="comment">// AsyncSeriesWaterfallHook2: AsyncSeriesWaterfallHook1</span></span><br><span class="line"><span class="comment">// end</span></span><br><span class="line"><span class="comment">// call time: 3010.715ms</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>npm开源库</title>
    <url>/blog/2020/11/24/npm%E5%BC%80%E6%BA%90%E5%BA%93/</url>
    <content><![CDATA[<h3 id="driver-js"><a href="#driver-js" class="headerlink" title="driver.js"></a>driver.js</h3><p>轻量级页面显示库，局部高亮，页面引导</p>
<img src="/blog/2020/11/24/npm%E5%BC%80%E6%BA%90%E5%BA%93/02.png" class>
<img src="/blog/2020/11/24/npm%E5%BC%80%E6%BA%90%E5%BA%93/03.png" class>

<h3 id="Luckysheet"><a href="#Luckysheet" class="headerlink" title="Luckysheet"></a>Luckysheet</h3><p>开源在线表格工具。<a href="https://github.com/961109899/Luckysheet">访问</a></p>
<img src="/blog/2020/11/24/npm%E5%BC%80%E6%BA%90%E5%BA%93/luckysheet.png" class>

<h3 id="鲁班-H5"><a href="#鲁班-H5" class="headerlink" title="鲁班 H5"></a>鲁班 H5</h3><p>开源移动页面生成器。<a href="http://docs.luban-h5.surge.sh/">访问</a></p>
<img src="/blog/2020/11/24/npm%E5%BC%80%E6%BA%90%E5%BA%93/luban.png" class>

<h3 id="鲁班-H5-1"><a href="#鲁班-H5-1" class="headerlink" title="鲁班 H5"></a>鲁班 H5</h3><p>图形验证码</p>
<img src="/blog/2020/11/24/npm%E5%BC%80%E6%BA%90%E5%BA%93/ajcaptcha.png" class>
<img src="/blog/2020/11/24/npm%E5%BC%80%E6%BA%90%E5%BA%93/ajcaptcha2.png" class>

<h3 id="filepond-文件上传"><a href="#filepond-文件上传" class="headerlink" title="filepond 文件上传"></a>filepond 文件上传</h3><p>非常优秀的文件上传库，可以上传文件，目录，blobs, URLS</p>
<img src="/blog/2020/11/24/npm%E5%BC%80%E6%BA%90%E5%BA%93/filepond.png" class>

<h3 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h3><p>express 中间件，多种方式实现 cors（跨域资源共享）。手动配置，动态域名等</p>
<p>简单用法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> cors = <span class="built_in">require</span>(<span class="string">&quot;cors&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(cors());</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/products/:id&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.json(&#123; <span class="attr">msg</span>: <span class="string">&quot;This is CORS-enabled for all origins!&quot;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">80</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;CORS-enabled web server listening on port 80&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>npm-link</title>
    <url>/blog/2020/11/25/npm-link/</url>
    <content><![CDATA[<h3 id="npm-link"><a href="#npm-link" class="headerlink" title="npm link"></a>npm link</h3><p>与一个 package 建立符号链接，总分为两步</p>
<ol>
<li>package 根目录执行命令 npm link</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">E:\Projects\package&gt; npm link</span><br></pre></td></tr></table></figure>

<p>package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;mypack&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bin&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;my-pack&quot;</span>: <span class="string">&quot;./bin/mypack.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在使用的目录执行命令 npm link mypack</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在node_modules下建立链接</span></span><br><span class="line">E:\Projects\examples\linkdemo&gt; npm link mypack</span><br><span class="line"><span class="comment"># 建立链接之后,可以执行命令my-pack</span></span><br><span class="line">E:\Projects\examples\linkdemo&gt; my-pack</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>npm cli</tag>
      </tags>
  </entry>
  <entry>
    <title>web-components</title>
    <url>/blog/2020/11/27/web-components/</url>
    <content><![CDATA[<p>Web Components 是一套创建自定义可复用元素的技术。实现 web Compnent 主要用到三种技术：</p>
<ul>
<li>Custom elements（自定义元素）：主要通过 window.customElements 的 API 创建自定义元素。例如：<code> window.customElements.define(&#39;my-custom-element&#39;, MyCustomElement);</code></li>
<li>Shadow DOM：将通过 shadow dom 创建的元素私有化，与文档中其他元素样式与脚本的隔离，使其不会相互影响。</li>
<li>HTML templates（HTML 模板）：html 模板，通过标签 <code>&lt;template&gt;</code> 和<code>&lt;slot&gt;</code> 定义,见用法 2</li>
</ul>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>用法 1，创建一个自定义元素 simple-custom</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">customElements.define(</span><br><span class="line">  <span class="string">&quot;simple-custom&quot;</span>,</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">HTMLElement</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> divElem = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      divElem.textContent = <span class="built_in">this</span>.getAttribute(<span class="string">&quot;text&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> shadowRoot = <span class="built_in">this</span>.attachShadow(&#123; <span class="attr">mode</span>: <span class="string">&quot;open&quot;</span> &#125;);</span><br><span class="line">      shadowRoot.appendChild(divElem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>:defined<span class="tag">&lt;/<span class="name">code</span>&gt;</span> demo<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">simple-custom</span> <span class="attr">text</span>=<span class="string">&quot;Custom element example text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">simple-custom</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Standard paragraph example text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>用法 2</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">document</span>.createElement(<span class="string">&quot;template&quot;</span>);</span><br><span class="line"></span><br><span class="line">template.innerHTML = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;style&gt; h3 &#123; color: blue; &#125;&lt;/style&gt;</span></span><br><span class="line"><span class="string">  &lt;h3&gt;Hello World&lt;/h3&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserCard</span> <span class="keyword">extends</span> <span class="title">HTMLElement</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.attachShadow(&#123; <span class="attr">mode</span>: <span class="string">&quot;open&quot;</span> &#125;);</span><br><span class="line">    <span class="built_in">this</span>.shadowRoot.appendChild(template.content.cloneNode(<span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> userNameTemplate = <span class="built_in">document</span>.getElementById(<span class="string">&quot;userNameTemplate&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.shadowRoot.appendChild(userNameTemplate.content);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.customElements.define(<span class="string">&quot;user-card&quot;</span>, UserCard);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">user-card</span>&gt;</span><span class="tag">&lt;/<span class="name">user-card</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;userNameTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>姓名：Jone<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;userCard.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果展示</p>
<img src="/blog/2020/11/27/web-components/01.png" class>

<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">HTMLElement</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 监听这个属性，使attributeChangedCallback回调函数生效，返回需要监听的属性名称。</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">get</span> <span class="title">observedAttributes</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;c&quot;</span>, <span class="string">&quot;l&quot;</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Always call super first in constructor</span></span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> shadow = <span class="built_in">this</span>.attachShadow(&#123; <span class="attr">mode</span>: <span class="string">&quot;open&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> style = <span class="built_in">document</span>.createElement(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">    shadow.appendChild(style);</span><br><span class="line">    shadow.appendChild(div);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 首次被插入DOM时调用</span></span><br><span class="line">  <span class="function"><span class="title">connectedCallback</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Custom square element added to page.&quot;</span>);</span><br><span class="line">    updateStyle(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从DOM中删除时调用, document.body.removeChild</span></span><br><span class="line">  <span class="function"><span class="title">disconnectedCallback</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Custom square element removed from page.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 移动到新DOM时调用</span></span><br><span class="line">  <span class="function"><span class="title">adoptedCallback</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Custom square element moved to new page.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 增加、删除、修改自身属性时被调用</span></span><br><span class="line">  <span class="function"><span class="title">attributeChangedCallback</span>(<span class="params">name, oldValue, newValue</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Custom square element attributes changed.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">customElements.define(<span class="string">&quot;custom-square&quot;</span>, Square);</span><br></pre></td></tr></table></figure>

<h3 id="用到-API"><a href="#用到-API" class="headerlink" title="用到 API"></a>用到 API</h3><p>attachShadow({ mode: ‘open’ }): ShadowRoot, 生成一个可以被挂在的元素，返回 ShadowRoot</p>
<ul>
<li>mode: open，元素可以被外部元素通过 js 获取</li>
<li>mode: close, 不能被获取</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/blog/2020/12/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p>普通元字符</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\s</td>
<td>匹配任何空白字符，包括空格、制表符、换页符</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任何非空白字符</td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词边界</td>
</tr>
<tr>
<td>\B</td>
<td>匹配非单词边界</td>
</tr>
<tr>
<td>\t</td>
<td>匹配一个制表符</td>
</tr>
<tr>
<td>\d</td>
<td>匹配一个数字</td>
</tr>
<tr>
<td>\D</td>
<td>匹配一个非数字</td>
</tr>
<tr>
<td>\w</td>
<td>匹配一个数字、字母、下划线</td>
</tr>
<tr>
<td>\W</td>
<td>匹配一个非数字、字母、下划线</td>
</tr>
<tr>
<td>\f</td>
<td>匹配一个换页符</td>
</tr>
<tr>
<td>\n</td>
<td>匹配一个换行符</td>
</tr>
<tr>
<td>\r</td>
<td>匹配一个回车符</td>
</tr>
<tr>
<td>.(点)</td>
<td>匹配一个非换行的任意字符</td>
</tr>
</tbody></table>
<p>限定元字符</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>匹配 0 次或多次</td>
</tr>
<tr>
<td>+</td>
<td>匹配 1 次或多次</td>
</tr>
<tr>
<td>?</td>
<td>匹配 0 次或 1 次</td>
</tr>
<tr>
<td>^</td>
<td>匹配输入字符串的开始位置</td>
</tr>
<tr>
<td>$</td>
<td>匹配输入字符串的结束位置</td>
</tr>
<tr>
<td>x|y</td>
<td>匹配 x 或 y</td>
</tr>
<tr>
<td>{n}</td>
<td>匹配 n 次</td>
</tr>
<tr>
<td>{n,}</td>
<td>至少匹配 n 次 或多次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>匹配 n 次 到 m 次</td>
</tr>
<tr>
<td>[a-z]</td>
<td>匹配 a-z 范围内的字符</td>
</tr>
<tr>
<td>[xyz]</td>
<td>匹配 包含的任一字符</td>
</tr>
<tr>
<td>^[xyz]</td>
<td>匹配 未包含的任一字符</td>
</tr>
<tr>
<td>(pattern)</td>
<td>匹配 并获取字符</td>
</tr>
<tr>
<td>(?:pattern)</td>
<td>匹配 pattern，但不返回结果</td>
</tr>
<tr>
<td>(?=pattern)</td>
<td>正向肯定定预查，不获取结果</td>
</tr>
<tr>
<td>(?!pattern)</td>
<td>正向否定预查，与肯定预查正好相反，不获取结果</td>
</tr>
<tr>
<td>(?&lt;=pattern)</td>
<td>反向肯定预查</td>
</tr>
<tr>
<td>(?&lt;!pattern)</td>
<td>反向否定预查</td>
</tr>
</tbody></table>
<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>i</td>
<td>不区分大小写</td>
</tr>
<tr>
<td>g</td>
<td>全局匹配</td>
</tr>
<tr>
<td>m</td>
<td>多行匹配</td>
</tr>
<tr>
<td>s</td>
<td>特殊字符圆点 . 包含换行符 \n</td>
</tr>
</tbody></table>
<h3 id="非贪婪匹配"><a href="#非贪婪匹配" class="headerlink" title="非贪婪匹配"></a>非贪婪匹配</h3><p>在限定符后加<code>?</code>为非贪婪匹配，匹配长度尽可能少的匹配结果</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>*?</td>
<td>匹配 0 次或多次，但尽可能</td>
</tr>
<tr>
<td>+?</td>
<td>匹配 1 次或多次</td>
</tr>
<tr>
<td>??</td>
<td>匹配 0 次或 1 次</td>
</tr>
<tr>
<td>{n,}?</td>
<td>至少匹配 n 次</td>
</tr>
<tr>
<td>{n,m}?</td>
<td>匹配 n 次到 m 次</td>
</tr>
</tbody></table>
<p><code>*</code>限定符， 匹配 0 次或多次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 非全局匹配</span></span><br><span class="line"><span class="string">&quot;123456abcd&quot;</span>.match(<span class="regexp">/\d*/</span>);</span><br><span class="line"><span class="comment">// [&quot;123456&quot;, index: 0, input: &quot;123456abcd&quot;, groups: undefined]</span></span><br><span class="line"><span class="string">&quot;123456abcd&quot;</span>.match(<span class="regexp">/\d*?/</span>);</span><br><span class="line"><span class="comment">// [&quot;&quot;, index: 0, input: &quot;123456abcd&quot;, groups: undefined]</span></span><br><span class="line"><span class="comment">// 全局匹配</span></span><br><span class="line"><span class="string">&quot;123456abcd&quot;</span>.match(<span class="regexp">/\d*?/g</span>);</span><br><span class="line"><span class="comment">// [&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]</span></span><br><span class="line"><span class="string">&quot;123456abcd&quot;</span>.match(<span class="regexp">/\d*/g</span>);</span><br><span class="line"><span class="comment">// [&quot;123456&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]</span></span><br></pre></td></tr></table></figure>

<p><code>+</code>限定符，匹配 1 次或多次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配结果尽可能少</span></span><br><span class="line"><span class="string">&quot;123456abcd&quot;</span>.match(<span class="regexp">/\d+/</span>);</span><br><span class="line"><span class="comment">// [&quot;123456&quot;, index: 0, input: &quot;123456abcd&quot;, groups: undefined]</span></span><br><span class="line"><span class="string">&quot;123456abcd&quot;</span>.match(<span class="regexp">/\d+?/</span>);</span><br><span class="line"><span class="comment">// [&quot;1&quot;, index: 0, input: &quot;123456abcd&quot;, groups: undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局匹配</span></span><br><span class="line"><span class="string">&quot;123456abcd&quot;</span>.match(<span class="regexp">/\d+?/g</span>);</span><br><span class="line"><span class="comment">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;]</span></span><br><span class="line"><span class="string">&quot;123456abcd&quot;</span>.match(<span class="regexp">/\d+/g</span>);</span><br><span class="line"><span class="comment">// [&quot;123456&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;123456abcd1234&quot;</span>.match(<span class="regexp">/\d+/g</span>);</span><br><span class="line"><span class="comment">// [&quot;123456&quot;, &quot;1234&quot;]</span></span><br></pre></td></tr></table></figure>

<p><code>?</code>限定符，匹配 0 次或 1 次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;123456abcd&quot;</span>.match(<span class="regexp">/\d??/</span>);</span><br><span class="line"><span class="comment">// [&quot;&quot;, index: 0, input: &quot;123456abcd&quot;, groups: undefined]</span></span><br><span class="line"><span class="string">&quot;123456abcd&quot;</span>.match(<span class="regexp">/\d?/</span>);</span><br><span class="line"><span class="comment">// [&quot;1&quot;, index: 0, input: &quot;123456abcd&quot;, groups: undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;123456abcd&quot;</span>.match(<span class="regexp">/\d??/g</span>);</span><br><span class="line"><span class="comment">//  [&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]</span></span><br><span class="line"><span class="string">&quot;123456abcd&quot;</span>.match(<span class="regexp">/\d?/g</span>);</span><br><span class="line"><span class="comment">// [&quot;123456&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="示例（js）"><a href="#示例（js）" class="headerlink" title="示例（js）"></a>示例（js）</h3><p>(pattern)：匹配 pattern，并且获取匹配结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;3window 7window 8window&quot;</span>.match(<span class="regexp">/(3|7)window/g</span>);</span><br><span class="line"><span class="comment">// [&quot;3window&quot;, &quot;7window&quot;]</span></span><br></pre></td></tr></table></figure>

<p>(?:pattern)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;window3 window7 window8&quot;</span>.match(<span class="regexp">/window(?:3|7)/g</span>);</span><br><span class="line"><span class="comment">// [&quot;window3&quot;, &quot;window7&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;window3 window5&quot;</span>.match(<span class="regexp">/window(?:3|7)/</span>);</span><br><span class="line"><span class="comment">// [&quot;window3&quot;, index: 0, input: &quot;window3 window5&quot;, groups: undefined]</span></span><br></pre></td></tr></table></figure>

<p>(?=pattern)：正向肯定预查</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配到了window3 window7 中的 window 但不匹配 window8</span></span><br><span class="line"><span class="string">&quot;window3 window7 window8&quot;</span>.match(<span class="regexp">/window(?=3|7)/g</span>);</span><br><span class="line"><span class="comment">// [&quot;window&quot;, &quot;window&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;window3 window7 window8&quot;</span>.match(<span class="regexp">/window(?=3|7|8)/g</span>);</span><br><span class="line"><span class="comment">//  [&quot;window&quot;, &quot;window&quot;, &quot;window&quot;]</span></span><br></pre></td></tr></table></figure>

<p>(?!pattern)：正向否定预查，与肯定预查正好相反</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配到了window8 中的 window 但不匹配 window3 window7</span></span><br><span class="line"><span class="string">&quot;window3 window7 window8&quot;</span>.match(<span class="regexp">/window(?!3|7)/g</span>);</span><br><span class="line"><span class="comment">// [&quot;window&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配到了window7 window8 中的 window 但不匹配 window3 window7</span></span><br><span class="line"><span class="string">&quot;window3 window7 window8&quot;</span>.match(<span class="regexp">/window(?!3)/g</span>);</span><br><span class="line"><span class="comment">//  [&quot;window&quot;, &quot;window&quot;]</span></span><br></pre></td></tr></table></figure>

<p>(?&lt;=pattern): 反向肯定预查，与正向肯定预查，匹配方向相反</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配到了window8 中的 window 但不匹配 window3 window7</span></span><br><span class="line"><span class="string">&quot;3window 7window 8window&quot;</span>.match(<span class="regexp">/(?&lt;=3|7)window/g</span>);</span><br><span class="line"><span class="comment">// [&quot;window&quot;, &quot;window&quot;]</span></span><br></pre></td></tr></table></figure>

<p>(?&lt;!pattern): 反向否定预查</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配到了window8 中的 window 但不匹配 window3 window7</span></span><br><span class="line"><span class="string">&quot;3window 7window 8window&quot;</span>.match(<span class="regexp">/(?&lt;!3|7)window/g</span>);</span><br><span class="line"><span class="comment">// [&quot;window&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="常用表达式"><a href="#常用表达式" class="headerlink" title="常用表达式"></a>常用表达式</h3><p>匹配数字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^[0-9]*$</span><br></pre></td></tr></table></figure>

<blockquote><p>content</p>
<footer><strong>[author[</strong><cite>source]] [link] [source_link_title]</cite></footer></blockquote>]]></content>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
</search>
